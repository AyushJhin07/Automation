version: "3.9"

x-node-environment: &node-environment
  NODE_ENV: development
  DATABASE_URL: postgres://automation:automation@postgres:5432/automation
  QUEUE_REDIS_HOST: redis
  QUEUE_REDIS_PORT: 6379
  QUEUE_REDIS_DB: 0
  OBSERVABILITY_ENABLED: "true"
  OTEL_SERVICE_NAME: automation-platform
  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://jaeger:4318/v1/traces

services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: automation
      POSTGRES_PASSWORD: automation
      POSTGRES_DB: automation
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U automation"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  jaeger:
    image: jaegertracing/all-in-one:1.61
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686"
      - "4318:4318"

  api:
    image: node:22
    working_dir: /app
    command: npm run dev:api
    environment:
      <<: *node-environment
      PORT: 5000
    volumes:
      - .:/app
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started

  worker:
    image: node:22
    working_dir: /app
    command: npm run dev:worker
    environment:
      <<: *node-environment
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started

  scheduler:
    image: node:22
    working_dir: /app
    command: npm run dev:scheduler
    environment:
      <<: *node-environment
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started

volumes:
  postgres-data:
  redis-data:
