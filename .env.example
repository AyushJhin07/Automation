# Base runtime configuration
NODE_ENV=development
PORT=5000
SERVER_PUBLIC_URL=http://localhost:5000

# Database connection (PostgreSQL URL)
# Format: postgres://USER:PASSWORD@HOST:PORT/DATABASE
DATABASE_URL=postgres://postgres:postgres@postgres:5432/automation

# Authentication & encryption secrets (generate per developer)
# Use a unique 32-byte base64 string, e.g. `openssl rand -base64 32`
ENCRYPTION_MASTER_KEY=
# Use a unique high-entropy string for signing JWTs (32+ characters recommended)
JWT_SECRET=

# LLM provider API keys (optional for local development)
OPENAI_API_KEY=
ANTHROPIC_API_KEY=
CLAUDE_API_KEY=
GOOGLE_API_KEY=
GEMINI_API_KEY=

# Feature flags
ENABLE_LLM_FEATURES=false
GENERIC_EXECUTOR_ENABLED=false
CONNECTOR_SIMULATOR_ENABLED=false
ALLOW_PLAINTEXT_TOKENS_IN_DEV=false
CONNECTOR_SIMULATOR_FIXTURES_DIR=server/testing/fixtures

# Queue / Redis configuration
# Defaults align with `server/env.ts`. Override if running Redis in Docker using
# the compose file (e.g. set to `redis`) or a remote instance.
QUEUE_REDIS_HOST=127.0.0.1
QUEUE_REDIS_PORT=6379
QUEUE_REDIS_DB=0
QUEUE_REDIS_USERNAME=
QUEUE_REDIS_PASSWORD=
QUEUE_REDIS_TLS=false
QUEUE_METRICS_INTERVAL_MS=60000

# Observability & OpenTelemetry
OBSERVABILITY_ENABLED=false
OTEL_SERVICE_NAME=automation-platform
OTEL_EXPORTER_OTLP_ENDPOINT=
OTEL_EXPORTER_OTLP_HEADERS=
OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=
OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=
OTEL_METRICS_EXPORTER=otlp
PROMETHEUS_METRICS_PORT=9464
PROMETHEUS_METRICS_HOST=0.0.0.0
PROMETHEUS_METRICS_ENDPOINT=/metrics
