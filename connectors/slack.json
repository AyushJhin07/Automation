{
  "id": "slack",
  "name": "Slack",
  "description": "Connect to Slack workspace for messaging, notifications, and collaboration automation",
  "category": "Communication",
  "icon": "slack",
  "color": "#4A154B",
  "authentication": {
    "type": "oauth2",
    "authUrl": "https://slack.com/oauth/v2/authorize",
    "tokenUrl": "https://slack.com/api/oauth.v2.access",
    "scopes": [
      "chat:write",
      "channels:read",
      "users:read",
      "files:write",
      "reactions:write"
    ],
    "clientIdRequired": true,
    "clientSecretRequired": true
  },
  "baseUrl": "https://slack.com/api",
  "rateLimits": {
    "requestsPerSecond": 1,
    "requestsPerMinute": 50,
    "burstAllowed": 3
  },
  "actions": [
    {
      "id": "send_message",
      "name": "Send Message",
      "description": "Send a message to a Slack channel or user",
      "endpoint": "/chat.postMessage",
      "method": "POST",
      "params": {
        "channel": {
          "type": "string",
          "required": true,
          "description": "Channel ID or user ID to send message to"
        },
        "text": {
          "type": "string",
          "required": true,
          "description": "Message text content"
        },
        "username": {
          "type": "string",
          "required": false,
          "description": "Bot username override"
        },
        "icon_emoji": {
          "type": "string",
          "required": false,
          "description": "Emoji icon for the message"
        },
        "thread_ts": {
          "type": "string",
          "required": false,
          "description": "Timestamp of parent message to reply in thread"
        },
        "blocks": {
          "type": "array",
          "required": false,
          "description": "Rich message blocks for formatting"
        }
      },
      "responseFields": [
        "ts",
        "channel",
        "message"
      ],
      "errorCodes": {
        "channel_not_found": "The specified channel does not exist",
        "not_in_channel": "Bot is not a member of the channel",
        "msg_too_long": "Message text is too long"
      }
    },
    {
      "id": "create_channel",
      "name": "Create Channel",
      "description": "Create a new Slack channel",
      "endpoint": "/conversations.create",
      "method": "POST",
      "params": {
        "name": {
          "type": "string",
          "required": true,
          "description": "Channel name (lowercase, no spaces)"
        },
        "is_private": {
          "type": "boolean",
          "required": false,
          "default": false,
          "description": "Create a private channel"
        }
      },
      "requiredScopes": [
        "channels:write",
        "groups:write"
      ],
      "responseFields": [
        "channel"
      ]
    },
    {
      "id": "upload_file",
      "name": "Upload File",
      "description": "Upload a file to Slack",
      "endpoint": "/files.upload",
      "method": "POST",
      "contentType": "multipart/form-data",
      "params": {
        "channels": {
          "type": "string",
          "required": true,
          "description": "Comma-separated list of channel IDs"
        },
        "content": {
          "type": "string",
          "required": false,
          "description": "File content as text"
        },
        "filename": {
          "type": "string",
          "required": false,
          "description": "Filename for the upload"
        },
        "title": {
          "type": "string",
          "required": false,
          "description": "Title of the file"
        },
        "initial_comment": {
          "type": "string",
          "required": false,
          "description": "Initial comment for the file"
        }
      },
      "requiredScopes": [
        "files:write"
      ],
      "responseFields": [
        "file"
      ]
    },
    {
      "id": "add_reaction",
      "name": "Add Reaction",
      "description": "Add an emoji reaction to a message",
      "endpoint": "/reactions.add",
      "method": "POST",
      "params": {
        "channel": {
          "type": "string",
          "required": true,
          "description": "Channel containing the message"
        },
        "timestamp": {
          "type": "string",
          "required": true,
          "description": "Timestamp of the message"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "Emoji name (without colons)"
        }
      },
      "requiredScopes": [
        "reactions:write"
      ],
      "responseFields": [
        "ok"
      ]
    },
    {
      "id": "set_status",
      "name": "Set User Status",
      "description": "Set the status for the authenticated user",
      "endpoint": "/users.profile.set",
      "method": "POST",
      "params": {
        "status_text": {
          "type": "string",
          "required": false,
          "description": "Status text to display"
        },
        "status_emoji": {
          "type": "string",
          "required": false,
          "description": "Status emoji"
        },
        "status_expiration": {
          "type": "number",
          "required": false,
          "description": "Unix timestamp when status expires"
        }
      },
      "requiredScopes": [
        "users.profile:write"
      ],
      "responseFields": [
        "profile"
      ]
    },
    {
      "id": "reply_in_thread",
      "name": "Reply in Thread",
      "description": "Reply to a message in a thread",
      "endpoint": "/chat.postMessage",
      "method": "POST",
      "params": {
        "channel": {
          "type": "string",
          "required": true,
          "description": "Channel ID"
        },
        "thread_ts": {
          "type": "string",
          "required": true,
          "description": "Timestamp of parent message"
        },
        "text": {
          "type": "string",
          "required": true,
          "description": "Reply text"
        }
      },
      "requiredScopes": [
        "chat:write"
      ]
    },
    {
      "id": "update_message",
      "name": "Update Message",
      "description": "Update an existing message",
      "endpoint": "/chat.update",
      "method": "POST",
      "params": {
        "channel": {
          "type": "string",
          "required": true,
          "description": "Channel ID"
        },
        "ts": {
          "type": "string",
          "required": true,
          "description": "Message timestamp"
        },
        "text": {
          "type": "string",
          "required": true,
          "description": "New message text"
        }
      },
      "requiredScopes": [
        "chat:write"
      ]
    },
    {
      "id": "delete_message",
      "name": "Delete Message",
      "description": "Delete a message",
      "endpoint": "/chat.delete",
      "method": "POST",
      "params": {
        "channel": {
          "type": "string",
          "required": true,
          "description": "Channel ID"
        },
        "ts": {
          "type": "string",
          "required": true,
          "description": "Message timestamp"
        }
      },
      "requiredScopes": [
        "chat:write"
      ]
    },
    {
      "id": "schedule_message",
      "name": "Schedule Message",
      "description": "Schedule a message to be sent later",
      "endpoint": "/chat.scheduleMessage",
      "method": "POST",
      "params": {
        "channel": {
          "type": "string",
          "required": true,
          "description": "Channel ID"
        },
        "text": {
          "type": "string",
          "required": true,
          "description": "Message text"
        },
        "post_at": {
          "type": "number",
          "required": true,
          "description": "Unix timestamp when to send"
        }
      },
      "requiredScopes": [
        "chat:write"
      ]
    },
    {
      "id": "pin_message",
      "name": "Pin Message",
      "description": "Pin a message to a channel",
      "endpoint": "/pins.add",
      "method": "POST",
      "params": {
        "channel": {
          "type": "string",
          "required": true,
          "description": "Channel ID"
        },
        "timestamp": {
          "type": "string",
          "required": true,
          "description": "Message timestamp"
        }
      },
      "requiredScopes": [
        "pins:write"
      ]
    },
    {
      "id": "unpin_message",
      "name": "Unpin Message",
      "description": "Unpin a message from a channel",
      "endpoint": "/pins.remove",
      "method": "POST",
      "params": {
        "channel": {
          "type": "string",
          "required": true,
          "description": "Channel ID"
        },
        "timestamp": {
          "type": "string",
          "required": true,
          "description": "Message timestamp"
        }
      },
      "requiredScopes": [
        "pins:write"
      ]
    },
    {
      "id": "remove_reaction",
      "name": "Remove Reaction",
      "description": "Remove a reaction from a message",
      "endpoint": "/reactions.remove",
      "method": "POST",
      "params": {
        "channel": {
          "type": "string",
          "required": true,
          "description": "Channel ID"
        },
        "timestamp": {
          "type": "string",
          "required": true,
          "description": "Message timestamp"
        },
        "name": {
          "type": "string",
          "required": true,
          "description": "Reaction emoji name"
        }
      },
      "requiredScopes": [
        "reactions:write"
      ]
    },
    {
      "id": "list_users",
      "name": "List Users",
      "description": "Get a list of workspace users",
      "endpoint": "/users.list",
      "method": "GET",
      "params": {
        "limit": {
          "type": "number",
          "required": false,
          "description": "Maximum number of users to return",
          "default": 100
        }
      },
      "requiredScopes": [
        "users:read"
      ]
    },
    {
      "id": "list_channels",
      "name": "List Channels",
      "description": "Get a list of channels",
      "endpoint": "/conversations.list",
      "method": "GET",
      "params": {
        "types": {
          "type": "string",
          "required": false,
          "description": "Channel types to include",
          "default": "public_channel,private_channel"
        },
        "limit": {
          "type": "number",
          "required": false,
          "description": "Maximum number of channels to return",
          "default": 100
        }
      },
      "requiredScopes": [
        "channels:read"
      ]
    },
    {
      "id": "archive_channel",
      "name": "Archive Channel",
      "description": "Archive a channel",
      "endpoint": "/conversations.archive",
      "method": "POST",
      "params": {
        "channel": {
          "type": "string",
          "required": true,
          "description": "Channel ID to archive"
        }
      },
      "requiredScopes": [
        "channels:write"
      ]
    }
  ],
  "triggers": [
    {
      "id": "new_message",
      "name": "New Message",
      "description": "Triggered when a new message is posted",
      "type": "webhook",
      "eventType": "message",
      "params": {
        "channel": {
          "type": "string",
          "required": false,
          "description": "Specific channel to monitor (leave empty for all)"
        },
        "user": {
          "type": "string",
          "required": false,
          "description": "Specific user to monitor"
        },
        "keyword": {
          "type": "string",
          "required": false,
          "description": "Keyword to filter messages"
        }
      },
      "outputFields": [
        "channel",
        "user",
        "text",
        "timestamp",
        "thread_ts"
      ],
      "requiredScopes": [
        "channels:history",
        "groups:history",
        "im:history"
      ]
    },
    {
      "id": "new_channel",
      "name": "New Channel Created",
      "description": "Triggered when a new channel is created",
      "type": "webhook",
      "eventType": "channel_created",
      "outputFields": [
        "channel"
      ],
      "requiredScopes": [
        "channels:read"
      ]
    },
    {
      "id": "user_joined",
      "name": "User Joined Workspace",
      "description": "Triggered when a new user joins the workspace",
      "type": "webhook",
      "eventType": "team_join",
      "outputFields": [
        "user"
      ],
      "requiredScopes": [
        "users:read"
      ]
    },
    {
      "id": "message_edited",
      "name": "Message Edited",
      "description": "Triggered when a message is edited",
      "params": {
        "channel": {
          "type": "string",
          "required": false,
          "description": "Filter by channel ID"
        }
      },
      "requiredScopes": [
        "channels:history"
      ]
    },
    {
      "id": "reaction_removed",
      "name": "Reaction Removed",
      "description": "Triggered when a reaction is removed from a message",
      "params": {
        "channel": {
          "type": "string",
          "required": false,
          "description": "Filter by channel ID"
        }
      },
      "requiredScopes": [
        "reactions:read"
      ]
    },
    {
      "id": "file_uploaded",
      "name": "File Uploaded",
      "description": "Triggered when a file is uploaded",
      "params": {
        "channel": {
          "type": "string",
          "required": false,
          "description": "Filter by channel ID"
        }
      },
      "requiredScopes": [
        "files:read"
      ]
    },
    {
      "id": "user_left",
      "name": "User Left",
      "description": "Triggered when a user leaves the workspace",
      "params": {},
      "requiredScopes": [
        "users:read"
      ]
    },
    {
      "id": "channel_archived",
      "name": "Channel Archived",
      "description": "Triggered when a channel is archived",
      "params": {},
      "requiredScopes": [
        "channels:read"
      ]
    }
  ],
  "testConnection": {
    "endpoint": "/auth.test",
    "method": "GET",
    "expectedResponse": {
      "ok": true
    }
  },
  "documentation": "https://api.slack.com/web",
  "supportContact": "https://slack.com/help/contact"
}