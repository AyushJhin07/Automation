{
  "id": "jira",
  "name": "Jira",
  "description": "Connect to Atlassian Jira for project management, issue tracking, and agile workflow automation",
  "category": "Project Management",
  "icon": "jira",
  "color": "#0052CC",
  "authentication": {
    "type": "oauth2",
    "authUrl": "https://auth.atlassian.com/authorize",
    "tokenUrl": "https://auth.atlassian.com/oauth/token",
    "scopes": [
      "read:jira-work",
      "write:jira-work",
      "manage:jira-project",
      "manage:jira-configuration"
    ],
    "clientIdRequired": true,
    "clientSecretRequired": true,
    "additionalParams": {
      "audience": "api.atlassian.com",
      "state": "your-random-string"
    }
  },
  "baseUrl": "https://api.atlassian.com/ex/jira/{cloudid}",
  "rateLimits": {
    "requestsPerSecond": 10,
    "requestsPerMinute": 300,
    "burstAllowed": 20
  },
  "actions": [
    {
      "id": "test_connection",
      "name": "Test Connection",
      "description": "Test the connection to Jira and verify authentication",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": [],
        "additionalProperties": false
      }
    },
    {
      "id": "create_issue",
      "name": "Create Issue",
      "description": "Create a new issue in Jira",
      "endpoint": "/rest/api/3/issue",
      "method": "POST",
      "parameters": {
        "type": "object",
        "properties": {
          "projectKey": {
            "type": "string",
            "description": "Project key (e.g., PROJ)"
          },
          "summary": {
            "type": "string",
            "description": "Issue summary/title"
          },
          "description": {
            "type": "string",
            "description": "Issue description"
          },
          "issueType": {
            "type": "string",
            "enum": [
              "Bug",
              "Task",
              "Story",
              "Epic",
              "Subtask"
            ],
            "description": "Type of issue to create"
          },
          "priority": {
            "type": "string",
            "enum": [
              "Highest",
              "High",
              "Medium",
              "Low",
              "Lowest"
            ],
            "default": "Medium",
            "description": "Issue priority"
          },
          "assignee": {
            "type": "string",
            "description": "Assignee account ID or email"
          },
          "reporter": {
            "type": "string",
            "description": "Reporter account ID or email"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Issue labels"
          },
          "components": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Component IDs or names"
          },
          "fixVersions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fix version IDs or names"
          },
          "customFields": {
            "type": "object",
            "description": "Custom field values as key-value pairs"
          }
        },
        "required": [
          "projectKey",
          "summary",
          "issueType"
        ],
        "additionalProperties": false
      }
    },
    {
      "id": "update_issue",
      "name": "Update Issue",
      "description": "Update an existing issue",
      "endpoint": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "PUT",
      "parameters": {
        "type": "object",
        "properties": {
          "issueIdOrKey": {
            "type": "string",
            "description": "Issue ID or key (e.g., PROJ-123)"
          },
          "summary": {
            "type": "string",
            "description": "Issue summary/title"
          },
          "description": {
            "type": "string",
            "description": "Issue description"
          },
          "assignee": {
            "type": "string",
            "description": "Assignee account ID or email"
          },
          "priority": {
            "type": "string",
            "enum": [
              "Highest",
              "High",
              "Medium",
              "Low",
              "Lowest"
            ],
            "description": "Issue priority"
          },
          "status": {
            "type": "string",
            "description": "Issue status (e.g., In Progress, Done)"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Issue labels"
          },
          "customFields": {
            "type": "object",
            "description": "Custom field values as key-value pairs"
          }
        },
        "required": [
          "issueIdOrKey"
        ],
        "additionalProperties": false
      }
    },
    {
      "id": "get_issue",
      "name": "Get Issue",
      "description": "Retrieve details of a specific issue",
      "endpoint": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "GET",
      "parameters": {
        "type": "object",
        "properties": {
          "issueIdOrKey": {
            "type": "string",
            "description": "Issue ID or key (e.g., PROJ-123)"
          },
          "fields": {
            "type": "string",
            "description": "Comma-separated list of fields to return"
          },
          "expand": {
            "type": "string",
            "description": "Comma-separated list of parameters to expand"
          }
        },
        "required": [
          "issueIdOrKey"
        ],
        "additionalProperties": false
      }
    },
    {
      "id": "search_issues",
      "name": "Search Issues",
      "description": "Search for issues using JQL",
      "endpoint": "/rest/api/3/search",
      "method": "GET",
      "parameters": {
        "type": "object",
        "properties": {
          "jql": {
            "type": "string",
            "description": "JQL query string"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fields to return for each issue"
          },
          "expand": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Parameters to expand"
          },
          "maxResults": {
            "type": "number",
            "default": 50,
            "maximum": 100,
            "description": "Maximum number of results to return"
          },
          "startAt": {
            "type": "number",
            "default": 0,
            "description": "Index of the first result to return"
          }
        },
        "required": [
          "jql"
        ],
        "additionalProperties": false
      }
    },
    {
      "id": "add_comment",
      "name": "Add Comment",
      "description": "Add a comment to an issue",
      "endpoint": "/rest/api/3/issue/{issueIdOrKey}/comment",
      "method": "POST",
      "parameters": {
        "type": "object",
        "properties": {
          "issueIdOrKey": {
            "type": "string",
            "description": "Issue ID or key"
          },
          "body": {
            "type": "string",
            "description": "Comment text content"
          },
          "visibility": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "group",
                  "role"
                ]
              },
              "value": {
                "type": "string"
              }
            },
            "description": "Comment visibility restrictions"
          }
        },
        "required": [
          "issueIdOrKey",
          "body"
        ],
        "additionalProperties": false
      }
    },
    {
      "id": "transition_issue",
      "name": "Transition Issue",
      "description": "Transition an issue to a different status",
      "endpoint": "/rest/api/3/issue/{issueIdOrKey}/transitions",
      "method": "POST",
      "parameters": {
        "type": "object",
        "properties": {
          "issueIdOrKey": {
            "type": "string",
            "description": "Issue ID or key"
          },
          "transitionId": {
            "type": "string",
            "description": "ID of the transition to execute"
          },
          "comment": {
            "type": "string",
            "description": "Optional comment for the transition"
          },
          "fields": {
            "type": "object",
            "description": "Field values to set during transition"
          }
        },
        "required": [
          "issueIdOrKey",
          "transitionId"
        ],
        "additionalProperties": false
      }
    },
    {
      "id": "assign_issue",
      "name": "Assign Issue",
      "description": "Assign an issue to a user",
      "endpoint": "/rest/api/3/issue/{issueIdOrKey}/assignee",
      "method": "PUT",
      "parameters": {
        "type": "object",
        "properties": {
          "issueIdOrKey": {
            "type": "string",
            "description": "Issue ID or key"
          },
          "accountId": {
            "type": "string",
            "description": "Account ID of the user to assign"
          }
        },
        "required": [
          "issueIdOrKey",
          "accountId"
        ],
        "additionalProperties": false
      }
    },
    {
      "id": "create_project",
      "name": "Create Project",
      "description": "Create a new Jira project",
      "endpoint": "/rest/api/3/project",
      "method": "POST",
      "parameters": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Project key (2-10 uppercase characters)"
          },
          "name": {
            "type": "string",
            "description": "Project name"
          },
          "projectTypeKey": {
            "type": "string",
            "enum": [
              "software",
              "service_desk",
              "business"
            ],
            "description": "Type of project to create"
          },
          "projectTemplateKey": {
            "type": "string",
            "description": "Template key for project creation"
          },
          "description": {
            "type": "string",
            "description": "Project description"
          },
          "leadAccountId": {
            "type": "string",
            "description": "Account ID of the project lead"
          }
        },
        "required": [
          "key",
          "name",
          "projectTypeKey"
        ],
        "additionalProperties": false
      }
    },
    {
      "id": "get_project",
      "name": "Get Project",
      "description": "Get details of a specific project",
      "endpoint": "/rest/api/3/project/{projectIdOrKey}",
      "method": "GET",
      "parameters": {
        "type": "object",
        "properties": {
          "projectIdOrKey": {
            "type": "string",
            "description": "Project ID or key"
          },
          "expand": {
            "type": "string",
            "description": "Comma-separated list of parameters to expand"
          }
        },
        "required": [
          "projectIdOrKey"
        ],
        "additionalProperties": false
      }
    },
    {
      "id": "list_projects",
      "name": "List Projects",
      "description": "Get a list of all projects",
      "endpoint": "/rest/api/3/project",
      "method": "GET",
      "parameters": {
        "type": "object",
        "properties": {
          "expand": {
            "type": "string",
            "description": "Comma-separated list of parameters to expand"
          },
          "recent": {
            "type": "number",
            "description": "Number of recent projects to return"
          },
          "properties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Project properties to filter by"
          }
        },
        "required": [],
        "additionalProperties": false
      }
    },
    {
      "id": "create_version",
      "name": "Create Version",
      "description": "Create a new version in a project",
      "endpoint": "/rest/api/3/version",
      "method": "POST",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Version name"
          },
          "description": {
            "type": "string",
            "description": "Version description"
          },
          "projectId": {
            "type": "string",
            "description": "Project ID"
          },
          "released": {
            "type": "boolean",
            "default": false,
            "description": "Whether the version is released"
          },
          "archived": {
            "type": "boolean",
            "default": false,
            "description": "Whether the version is archived"
          },
          "releaseDate": {
            "type": "string",
            "format": "date",
            "description": "Release date (YYYY-MM-DD)"
          }
        },
        "required": [
          "name",
          "projectId"
        ],
        "additionalProperties": false
      }
    }
  ],
  "triggers": [
    {
      "id": "issue_created",
      "name": "Issue Created",
      "description": "Triggered when a new issue is created",
      "type": "webhook",
      "parameters": {
        "type": "object",
        "properties": {
          "projectKey": {
            "type": "string",
            "description": "Filter by specific project key"
          },
          "issueType": {
            "type": "string",
            "description": "Filter by issue type"
          },
          "assignee": {
            "type": "string",
            "description": "Filter by assignee account ID"
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "issueId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "issueType": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "assignee": {
            "type": "string"
          },
          "reporter": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "projectKey": {
            "type": "string"
          }
        }
      }
    },
    {
      "id": "issue_updated",
      "name": "Issue Updated",
      "description": "Triggered when an issue is updated",
      "type": "webhook",
      "parameters": {
        "type": "object",
        "properties": {
          "projectKey": {
            "type": "string",
            "description": "Filter by specific project key"
          },
          "fieldsToWatch": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specific fields to watch for changes"
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "issueId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "changelog": {
            "type": "object"
          },
          "updated": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        }
      }
    },
    {
      "id": "issue_status_changed",
      "name": "Issue Status Changed",
      "description": "Triggered when an issue status changes",
      "type": "webhook",
      "parameters": {
        "type": "object",
        "properties": {
          "projectKey": {
            "type": "string",
            "description": "Filter by specific project key"
          },
          "fromStatus": {
            "type": "string",
            "description": "Watch for transitions from this status"
          },
          "toStatus": {
            "type": "string",
            "description": "Watch for transitions to this status"
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "issueId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "fromStatus": {
            "type": "string"
          },
          "toStatus": {
            "type": "string"
          },
          "transitionDate": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        }
      }
    },
    {
      "id": "comment_added",
      "name": "Comment Added",
      "description": "Triggered when a comment is added to an issue",
      "type": "webhook",
      "parameters": {
        "type": "object",
        "properties": {
          "projectKey": {
            "type": "string",
            "description": "Filter by specific project key"
          },
          "issueType": {
            "type": "string",
            "description": "Filter by issue type"
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "issueId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "commentId": {
            "type": "string"
          },
          "commentBody": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "created": {
            "type": "string"
          }
        }
      }
    }
  ],
  "testConnection": {
    "method": "GET",
    "endpoint": "/rest/api/3/myself"
  },
  "version": "1.0.0",
  "release": {
    "semver": "1.0.0",
    "status": "stable",
    "isBeta": false,
    "betaStartedAt": null,
    "deprecationWindow": {
      "startDate": null,
      "sunsetDate": null
    }
  }
}
