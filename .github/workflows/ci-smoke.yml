name: CI Smoke

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  smoke:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - run: npm install

      - name: Run local smoke
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          QUEUE_REDIS_HOST: 127.0.0.1
          QUEUE_REDIS_PORT: 6379
        run: npm run ci:smoke-local

  apps-script-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - run: npm install

      - name: Prepare coverage workspace
        run: mkdir -p coverage

      - name: Fetch baseline Apps Script coverage
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1 || true
          if git show origin/${{ github.base_ref }}:production/reports/apps-script-runtime-coverage.json > coverage/apps-script-runtime-coverage.base.json 2>/dev/null; then
            echo "Baseline Apps Script coverage loaded."
          else
            echo '{}' > coverage/apps-script-runtime-coverage.base.json
            echo "No baseline coverage found for ${GITHUB_BASE_REF:-base}; using empty summary." >&2
          fi

      - name: Default baseline Apps Script coverage
        if: github.event_name != 'pull_request'
        run: echo '{}' > coverage/apps-script-runtime-coverage.base.json

      - name: Generate Apps Script coverage report
        id: coverage
        continue-on-error: true
        env:
          APPS_SCRIPT_COVERAGE_TARGET: '1'
        run: |
          npm run report:apps-script-coverage -- --json coverage/apps-script-runtime-coverage.json --csv coverage/apps-script-runtime-coverage.csv

      - name: Upload Apps Script coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apps-script-coverage
          if-no-files-found: warn
          path: |
            coverage/apps-script-runtime-coverage.json
            coverage/apps-script-runtime-coverage.csv

      - name: Summarize Apps Script coverage
        if: always()
        id: coverage-summary
        run: |
          node scripts/summarize-apps-script-coverage.js \
            --current coverage/apps-script-runtime-coverage.json \
            --baseline coverage/apps-script-runtime-coverage.base.json

      - name: Post Apps Script coverage comment
        if: github.event_name == 'pull_request' && steps.coverage-summary.outcome == 'success'
        uses: actions/github-script@v7
        env:
          COVERAGE_COMMENT: ${{ steps.coverage-summary.outputs.comment }}
        with:
          script: |
            const marker = '<!-- apps-script-coverage -->';
            const body = process.env.COVERAGE_COMMENT;
            if (!body) {
              core.warning('No Apps Script coverage comment body was generated.');
              return;
            }

            const finalBody = body.includes(marker) ? body : `${marker}\n${body}`;
            const { owner, repo, number } = context.issue;
            const comments = await github.paginate(github.rest.issues.listComments, {
              owner,
              repo,
              issue_number: number,
              per_page: 100,
            });

            const existing = comments.find(comment => comment.body && comment.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body: finalBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: finalBody,
              });
            }

      - name: Fail if Apps Script coverage is below target
        if: steps.coverage.outcome == 'failure'
        run: |
          echo 'Apps Script coverage is below the configured target.' >&2
          exit 1
