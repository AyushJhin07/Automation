// GRAPH FORMAT CONVERTER
// Converts AI-generated WorkflowGraph to Graph Editor compatible NodeGraph

import { WorkflowGraph, WorkflowNode, WorkflowEdge } from '../../common/workflow-types';
import { enrichWorkflowGraph } from './node-metadata';
import { NodeGraph, GraphNode, Edge } from '../../shared/nodeGraphSchema';

export function convertToNodeGraph(workflowGraph: WorkflowGraph): NodeGraph {
  console.log('🔄 Converting AI graph to Graph Editor format...');

  const enrichedGraph = enrichWorkflowGraph(workflowGraph);

  // Convert nodes from AI format to Graph Editor format
  const graphNodes: GraphNode[] = enrichedGraph.nodes.map((node, index) => {
    // Handle both old format (with op) and new format (with data.operation)
    const operation = node.op?.split('.').pop() || node.data?.operation || 'default';
    const app = node.app || node.type?.split('.')[1] || 'unknown';
    const nodeType = `${node.type?.split('.')[0] || node.type}.${app}.${operation}`;
    
    return {
      id: node.id,
      type: nodeType,
      label: node.name || node.data?.label || `${app} ${node.type}`,
      params: node.params || node.data?.config || {},
      position: node.position || {
        x: 100 + (index * 300), // Auto-layout horizontally
        y: 100 + (Math.floor(index / 3) * 200) // Wrap to new row every 3 nodes
      },
      color: getAppColor(app),
      icon: getAppIcon(app),
      // Preserve original data for Graph Editor
      data: node.data,
      app: app,
      op: node.op || `${app}.${operation}`
    };
  });

  // Convert edges from AI format to Graph Editor format
  const graphEdges: Edge[] = enrichedGraph.edges.map(edge => ({
    from: edge.source || edge.from,
    to: edge.target || edge.to,
    label: edge.label || '',
    dataType: 'default'
  }));
  
  // Extract scopes and secrets from nodes
  const scopes = extractRequiredScopes(workflowGraph.nodes);
  const secrets = extractRequiredSecrets(workflowGraph.nodes);
  
  const nodeGraph: NodeGraph = {
    id: workflowGraph.id,
    name: workflowGraph.name || 'AI Generated Workflow',
    version: 1,
    nodes: graphNodes,
    edges: graphEdges,
    scopes,
    secrets,
    metadata: {
      createdBy: 'AI Builder',
      createdAt: new Date().toISOString(),
      description: workflowGraph.meta?.description || 'Generated by AI Builder',
      complexity: determineComplexity(graphNodes.length),
      automationType: workflowGraph.meta?.automationType
    }
  };
  
  console.log(`✅ Converted ${graphNodes.length} nodes and ${graphEdges.length} edges`);
  return nodeGraph;
}

function getAppColor(app: string): string {
  const colorMap: Record<string, string> = {
    'gmail': '#EA4335',
    'sheets': '#34A853', 
    'drive': '#4285F4',
    'calendar': '#FBBC04',
    'forms': '#673AB7',
    'slack': '#4A154B',
    'salesforce': '#00A1E0',
    'hubspot': '#FF7A59',
    'mailchimp': '#FFE01B',
    'shopify': '#96BF48',
    'stripe': '#635BFF',
    'jenkins': '#D33833',
    'docker-hub': '#2496ED',
    'kubernetes': '#326CE5',
    'terraform-cloud': '#623CE4',
    'prometheus': '#E6522C',
    'grafana': '#F46800'
  };
  
  return colorMap[app] || '#6B7280';
}

function getAppIcon(app: string): string {
  const iconMap: Record<string, string> = {
    'gmail': '✉️',
    'sheets': '📊',
    'drive': '📁', 
    'calendar': '📅',
    'forms': '📝',
    'slack': '💬',
    'salesforce': '☁️',
    'hubspot': '🧲',
    'mailchimp': '🐵',
    'shopify': '🛍️',
    'stripe': '💳',
    'jenkins': '🔧',
    'docker-hub': '🐳',
    'kubernetes': '☸️',
    'terraform-cloud': '🏗️',
    'prometheus': '🔥',
    'grafana': '📊'
  };
  
  return iconMap[app] || '⚙️';
}

function extractRequiredScopes(nodes: WorkflowNode[]): string[] {
  const scopeMap: Record<string, string[]> = {
    'gmail': ['https://www.googleapis.com/auth/gmail.readonly', 'https://www.googleapis.com/auth/gmail.send'],
    'sheets': ['https://www.googleapis.com/auth/spreadsheets'],
    'drive': ['https://www.googleapis.com/auth/drive'],
    'calendar': ['https://www.googleapis.com/auth/calendar'],
    'forms': ['https://www.googleapis.com/auth/forms']
  };
  
  const scopes = new Set<string>();
  nodes.forEach(node => {
    const appScopes = scopeMap[node.app] || [];
    appScopes.forEach(scope => scopes.add(scope));
  });
  
  return Array.from(scopes);
}

function extractRequiredSecrets(nodes: WorkflowNode[]): string[] {
  const secretMap: Record<string, string[]> = {
    'slack': ['SLACK_BOT_TOKEN'],
    'salesforce': ['SALESFORCE_ACCESS_TOKEN'],
    'hubspot': ['HUBSPOT_API_KEY'],
    'mailchimp': ['MAILCHIMP_API_KEY'],
    'shopify': ['SHOPIFY_ACCESS_TOKEN'],
    'stripe': ['STRIPE_API_KEY'],
    'jenkins': ['JENKINS_USERNAME', 'JENKINS_TOKEN'],
    'docker-hub': ['DOCKER_HUB_USERNAME', 'DOCKER_HUB_ACCESS_TOKEN'],
    'kubernetes': ['KUBERNETES_API_SERVER', 'KUBERNETES_BEARER_TOKEN'],
    'terraform-cloud': ['TERRAFORM_CLOUD_API_TOKEN'],
    'prometheus': ['PROMETHEUS_SERVER_URL'],
    'grafana': ['GRAFANA_API_KEY', 'GRAFANA_SERVER_URL']
  };
  
  const secrets = new Set<string>();
  nodes.forEach(node => {
    const appSecrets = secretMap[node.app] || [];
    appSecrets.forEach(secret => secrets.add(secret));
  });
  
  return Array.from(secrets);
}

function determineComplexity(nodeCount: number): 'Simple' | 'Medium' | 'Complex' {
  if (nodeCount <= 2) return 'Simple';
  if (nodeCount <= 5) return 'Medium';
  return 'Complex';
}