import { CompileResult, WorkflowGraph } from '../../common/workflow-types';

export function compileToAppsScript(graph: WorkflowGraph): CompileResult {
  const triggers   = graph.nodes.filter(n => n.type === 'trigger').length;
  const actions    = graph.nodes.filter(n => n.type === 'action').length;
  const transforms = graph.nodes.filter(n => n.type === 'transform').length;

  const code = emitCode(graph);
  const manifest = emitManifest();

  return {
    workflowId: graph.id,
    graph,
    stats: { nodes: graph.nodes.length, triggers, actions, transforms },
    files: [
      { path: 'Code.gs',        content: code },
      { path: 'appsscript.json', content: manifest },
    ],
  };
}

function emitManifest(): string {
  return JSON.stringify({
    timeZone: 'Etc/UTC',
    exceptionLogging: 'STACKDRIVER',
    oauthScopes: [
      'https://www.googleapis.com/auth/gmail.modify',
      'https://www.googleapis.com/auth/spreadsheets',
      'https://www.googleapis.com/auth/script.external_request',
    ],
  }, null, 2);
}

function emitCode(graph: WorkflowGraph): string {
  const meta = graph.meta as any;
  const query     = graph.nodes.find(n => n.id === 'n1')?.params?.query || 'in:inbox is:unread';
  const everyMin  = meta?.everyMin ?? 5;
  const sheetId   = meta?.spreadsheetId || '';
  const sheetName = meta?.sheetName || 'Sheet1';

  return `
/**
 * Generated by Apps Script Studio
 * Flow: Gmail → Filter → Pick Fields → Sheets
 */
function main() {
  const query = ${JSON.stringify(query)};
  const threads = GmailApp.search(query, 0, 50);
  if (!threads.length) return;

  const ss   = SpreadsheetApp.openById(${JSON.stringify(sheetId)});
  const sh   = ss.getSheetByName(${JSON.stringify(sheetName)}) || ss.getSheets()[0];

  threads.forEach(t => {
    const m = t.getMessages().pop();
    const row = [
      m.getSubject() || '',
      m.getFrom() || '',
      Utilities.formatDate(m.getDate(), Session.getScriptTimeZone(), 'yyyy-MM-dd HH:mm'),
      (m.getPlainBody() || '').substring(0, 500)
    ];
    sh.appendRow(row);
    t.markAsRead();
  });
}

function setupTriggers() {
  ScriptApp.getProjectTriggers().forEach(tr => { if (tr.getHandlerFunction() === 'main') ScriptApp.deleteTrigger(tr); });
  ScriptApp.newTrigger('main').timeBased().everyMinutes(${everyMin}).create();
}
`.trim();
}