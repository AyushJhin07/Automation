exports[`Apps Script ADP REAL_OPS builds action.adp:test_connection 1`] = `
function step_action_adp_test_connection(ctx) {
  ctx = ctx || {};
  const config = {};
  const params = adpResolveConfig(config, ctx);
  try {
    return adpExecuteOperation('test_connection', ctx, params);
  } catch (error) {
    logError('adp_test_connection_failed', { message: error && error.message ? error.message : String(error) });
    throw error;
  }
}

if (typeof adpResolveConfig !== 'function') {
  function adpResolveConfig(config, ctx) {
    if (config === null || config === undefined) {
      return {};
    }
    if (Array.isArray(config)) {
      var arr = [];
      for (var i = 0; i < config.length; i++) {
        arr.push(adpResolveConfig(config[i], ctx));
      }
      return arr;
    }
    if (typeof config === 'object') {
      var obj = {};
      for (var key in config) {
        if (!Object.prototype.hasOwnProperty.call(config, key)) continue;
        obj[key] = adpResolveConfig(config[key], ctx);
      }
      return obj;
    }
    if (typeof config === 'string') {
      var trimmed = config.trim();
      if (!trimmed) {
        return '';
      }
      return interpolate(trimmed, ctx);
    }
    return config;
  }
}


if (typeof adpExecuteOperation !== 'function') {
  function adpNormalizeBaseUrl(value) {
    var url = (value && typeof value === 'string') ? value.trim() : '';
    if (!url) {
      return 'https://api.adp.com';
    }
    if (url.charAt(url.length - 1) === '/') {
      url = url.slice(0, -1);
    }
    return url;
  }

  function adpParseCompanyCodes(value) {
    var source = [];
    if (Array.isArray(value)) {
      source = value;
    } else if (typeof value === 'string') {
      source = value.split(',');
    } else if (value !== null && value !== undefined) {
      source = [value];
    }

    var codes = [];
    for (var i = 0; i < source.length; i++) {
      var code = source[i];
      if (code === null || code === undefined) {
        continue;
      }
      var trimmed = String(code).trim();
      if (!trimmed) {
        continue;
      }
      if (codes.indexOf(trimmed) === -1) {
        codes.push(trimmed);
      }
    }
    return codes;
  }

  function adpResolveCompanyCodes(params, inputData, secretValue) {
    var codes = [];

    function pushAll(value) {
      var parsed = adpParseCompanyCodes(value);
      for (var i = 0; i < parsed.length; i++) {
        var code = parsed[i];
        if (codes.indexOf(code) === -1) {
          codes.push(code);
        }
      }
    }

    pushAll(secretValue);

    if (params && params.companyCodes !== undefined) {
      pushAll(params.companyCodes);
    }
    if (params && params.companyCode !== undefined) {
      pushAll(params.companyCode);
    }
    if (params && params.company_codes !== undefined) {
      pushAll(params.company_codes);
    }
    if (params && params.company_code !== undefined) {
      pushAll(params.company_code);
    }

    if (inputData && inputData.companyCodes !== undefined) {
      pushAll(inputData.companyCodes);
    }
    if (inputData && inputData.companyCode !== undefined) {
      pushAll(inputData.companyCode);
    }
    if (inputData && inputData.adpCompanyCodes !== undefined) {
      pushAll(inputData.adpCompanyCodes);
    }
    if (inputData && inputData.adpCompanyCode !== undefined) {
      pushAll(inputData.adpCompanyCode);
    }

    return codes;
  }

  function adpSanitizePayload(payload) {
    if (payload === null || payload === undefined) {
      return {};
    }
    if (Array.isArray(payload)) {
      var arr = [];
      for (var i = 0; i < payload.length; i++) {
        arr.push(adpSanitizePayload(payload[i]));
      }
      return arr;
    }
    if (typeof payload === 'object') {
      var result = {};
      for (var key in payload) {
        if (!Object.prototype.hasOwnProperty.call(payload, key)) {
          continue;
        }
        var value = payload[key];
        if (value === undefined) {
          continue;
        }
        result[key] = adpSanitizePayload(value);
      }
      return result;
    }
    return payload;
  }

  function adpSerializePayload(payload) {
    if (payload === null || payload === undefined) {
      return null;
    }
    if (typeof payload === 'string') {
      return payload;
    }
    return JSON.stringify(payload);
  }

  function adpBuildHeaders(token, companyCodes, clientId) {
    var headers = {
      'Authorization': 'Bearer ' + token,
      'Accept': 'application/json'
    };

    if (companyCodes && companyCodes.length) {
      headers['ADP-CompanyCode'] = companyCodes[0];
    }

    if (clientId) {
      headers['ADP-ClientId'] = clientId;
    }

    return headers;
  }

  function adpRequest(baseUrl, token, method, endpoint, payload, companyCodes, clientId) {
    if (!endpoint) {
      throw new Error('ADP endpoint is required');
    }

    var normalizedEndpoint = String(endpoint);
    if (normalizedEndpoint.charAt(0) !== '/') {
      normalizedEndpoint = '/' + normalizedEndpoint;
    }

    var url = adpNormalizeBaseUrl(baseUrl) + normalizedEndpoint;
    var serializedPayload = adpSerializePayload(payload);
    var headers = adpBuildHeaders(token, companyCodes, clientId);

    var requestOptions = {
      url: url,
      method: method || 'GET',
      headers: headers,
      muteHttpExceptions: true
    };

    if (serializedPayload !== null) {
      requestOptions.payload = serializedPayload;
      requestOptions.contentType = 'application/json';
    }

    return rateLimitAware(function () {
      return fetchJson(requestOptions);
    }, { attempts: 4, initialDelayMs: 500, backoffFactor: 2 });
  }

  function adpHandleTestConnection(baseUrl, token, params, inputData, companyCodes, clientId) {
    var response = adpRequest(baseUrl, token, 'GET', '/hr/v2/workers?$top=1', null, companyCodes, clientId);
    var workers = [];
    if (response && response.body && Array.isArray(response.body.workers)) {
      workers = response.body.workers;
    }
    logInfo('adp_test_connection', { status: response ? response.status : null, workersPreview: workers.length });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.adpConnection = 'ok';
    next.adpWorkersPreview = workers;
    return next;
  }

  function adpResolveWorkerId(params, inputData) {
    var candidates = [];
    if (params && params.worker_id !== undefined) {
      candidates.push(params.worker_id);
    }
    if (params && params.workerId !== undefined) {
      candidates.push(params.workerId);
    }
    if (inputData && inputData.worker_id !== undefined) {
      candidates.push(inputData.worker_id);
    }
    if (inputData && inputData.workerId !== undefined) {
      candidates.push(inputData.workerId);
    }

    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];
      if (candidate === null || candidate === undefined) {
        continue;
      }
      var trimmed = String(candidate).trim();
      if (trimmed) {
        return trimmed;
      }
    }

    return '';
  }

  function adpHandleGetWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var workerId = adpResolveWorkerId(params, inputData);
    if (!workerId) {
      throw new Error('worker_id is required for ADP get_worker');
    }

    var response = adpRequest(baseUrl, token, 'GET', '/hr/v2/workers/' + encodeURIComponent(workerId), null, companyCodes, clientId);
    logInfo('adp_get_worker', { workerId: workerId, status: response ? response.status : null });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = response ? response.body : null;
    next.workerId = workerId;
    return next;
  }

  function adpBuildCreatePayload(params) {
    if (params && typeof params.payload === 'object') {
      return adpSanitizePayload(params.payload);
    }
    if (params && typeof params.worker === 'object') {
      return adpSanitizePayload(params.worker);
    }

    var allowed = ['associateOID', 'workerDates', 'person', 'workAssignments'];
    var payload = {};
    for (var i = 0; i < allowed.length; i++) {
      var key = allowed[i];
      if (params && Object.prototype.hasOwnProperty.call(params, key) && params[key] !== undefined) {
        payload[key] = adpSanitizePayload(params[key]);
      }
    }
    return payload;
  }

  function adpHandleCreateWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var payload = adpBuildCreatePayload(params || {});
    var response = adpRequest(baseUrl, token, 'POST', '/hr/v2/workers', payload, companyCodes, clientId);
    var workerId = response && response.body && response.body.id ? response.body.id : null;
    logInfo('adp_create_worker', { status: response ? response.status : null, workerId: workerId });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = (response && response.body) ? response.body : payload;
    next.workerId = workerId;
    return next;
  }

  function adpBuildUpdatePayload(params) {
    if (params && typeof params.payload === 'object') {
      return adpSanitizePayload(params.payload);
    }
    if (params && typeof params.worker === 'object') {
      return adpSanitizePayload(params.worker);
    }
    if (params && typeof params.person === 'object') {
      return adpSanitizePayload({ person: params.person });
    }
    return adpSanitizePayload({});
  }

  function adpHandleUpdateWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var workerId = adpResolveWorkerId(params, inputData);
    if (!workerId) {
      throw new Error('worker_id is required for ADP update_worker');
    }

    var payload = adpBuildUpdatePayload(params || {});
    var response = adpRequest(baseUrl, token, 'PUT', '/hr/v2/workers/' + encodeURIComponent(workerId), payload, companyCodes, clientId);
    logInfo('adp_update_worker', { workerId: workerId, status: response ? response.status : null });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = (response && response.body) ? response.body : payload;
    next.workerId = workerId;
    return next;
  }

  function adpHandleWorkerHiredTrigger(params, inputData) {
    var payload = params && params.payload ? params.payload : (inputData && inputData.payload ? inputData.payload : inputData);
    var eventType = payload && payload.eventType ? payload.eventType : 'worker_hired';
    var worker = null;
    if (payload) {
      if (payload.worker) {
        worker = payload.worker;
      } else if (payload.data && payload.data.worker) {
        worker = payload.data.worker;
      }
    }

    logInfo('adp_worker_hired_trigger', { eventType: eventType, hasWorker: !!worker });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.eventType = eventType;
    next.worker = worker;
    next.payload = payload;
    return next;
  }

  function adpExecuteOperation(operation, inputData, params) {
    params = params || {};
    inputData = inputData || {};

    var token = requireOAuthToken('adp', { scopes: ["api","hr.worker.read","hr.worker.write","payroll.payroll_processing","payroll.payroll_reports.read"] });
    var clientId = getSecret('ADP_CLIENT_ID', { connectorKey: 'adp' });
    var clientSecret = getSecret('ADP_CLIENT_SECRET', { connectorKey: 'adp' });
    if (!clientSecret) {
      throw new Error('Missing ADP client secret');
    }
    var companySecret = getSecret('ADP_COMPANY_CODES', { connectorKey: 'adp' });
    var companyCodes = adpResolveCompanyCodes(params, inputData, companySecret);
    if (!companyCodes.length) {
      throw new Error('At least one ADP company code is required');
    }

    var baseUrl = params.baseUrl || params.base_url || 'https://api.adp.com';
    var normalizedOperation = (operation || '').toLowerCase();

    if (normalizedOperation === 'test_connection') {
      return adpHandleTestConnection(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'get_worker') {
      return adpHandleGetWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'create_worker') {
      return adpHandleCreateWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'update_worker') {
      return adpHandleUpdateWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'worker_hired') {
      return adpHandleWorkerHiredTrigger(params, inputData);
    }

    throw new Error('Unsupported ADP operation: ' + operation);
  }
}

`;
exports[`Apps Script ADP REAL_OPS builds action.adp:get_worker 1`] = `
function step_action_adp_get_worker(ctx) {
  ctx = ctx || {};
  const config = {};
  const params = adpResolveConfig(config, ctx);
  try {
    return adpExecuteOperation('get_worker', ctx, params);
  } catch (error) {
    logError('adp_get_worker_failed', { message: error && error.message ? error.message : String(error) });
    throw error;
  }
}

if (typeof adpResolveConfig !== 'function') {
  function adpResolveConfig(config, ctx) {
    if (config === null || config === undefined) {
      return {};
    }
    if (Array.isArray(config)) {
      var arr = [];
      for (var i = 0; i < config.length; i++) {
        arr.push(adpResolveConfig(config[i], ctx));
      }
      return arr;
    }
    if (typeof config === 'object') {
      var obj = {};
      for (var key in config) {
        if (!Object.prototype.hasOwnProperty.call(config, key)) continue;
        obj[key] = adpResolveConfig(config[key], ctx);
      }
      return obj;
    }
    if (typeof config === 'string') {
      var trimmed = config.trim();
      if (!trimmed) {
        return '';
      }
      return interpolate(trimmed, ctx);
    }
    return config;
  }
}


if (typeof adpExecuteOperation !== 'function') {
  function adpNormalizeBaseUrl(value) {
    var url = (value && typeof value === 'string') ? value.trim() : '';
    if (!url) {
      return 'https://api.adp.com';
    }
    if (url.charAt(url.length - 1) === '/') {
      url = url.slice(0, -1);
    }
    return url;
  }

  function adpParseCompanyCodes(value) {
    var source = [];
    if (Array.isArray(value)) {
      source = value;
    } else if (typeof value === 'string') {
      source = value.split(',');
    } else if (value !== null && value !== undefined) {
      source = [value];
    }

    var codes = [];
    for (var i = 0; i < source.length; i++) {
      var code = source[i];
      if (code === null || code === undefined) {
        continue;
      }
      var trimmed = String(code).trim();
      if (!trimmed) {
        continue;
      }
      if (codes.indexOf(trimmed) === -1) {
        codes.push(trimmed);
      }
    }
    return codes;
  }

  function adpResolveCompanyCodes(params, inputData, secretValue) {
    var codes = [];

    function pushAll(value) {
      var parsed = adpParseCompanyCodes(value);
      for (var i = 0; i < parsed.length; i++) {
        var code = parsed[i];
        if (codes.indexOf(code) === -1) {
          codes.push(code);
        }
      }
    }

    pushAll(secretValue);

    if (params && params.companyCodes !== undefined) {
      pushAll(params.companyCodes);
    }
    if (params && params.companyCode !== undefined) {
      pushAll(params.companyCode);
    }
    if (params && params.company_codes !== undefined) {
      pushAll(params.company_codes);
    }
    if (params && params.company_code !== undefined) {
      pushAll(params.company_code);
    }

    if (inputData && inputData.companyCodes !== undefined) {
      pushAll(inputData.companyCodes);
    }
    if (inputData && inputData.companyCode !== undefined) {
      pushAll(inputData.companyCode);
    }
    if (inputData && inputData.adpCompanyCodes !== undefined) {
      pushAll(inputData.adpCompanyCodes);
    }
    if (inputData && inputData.adpCompanyCode !== undefined) {
      pushAll(inputData.adpCompanyCode);
    }

    return codes;
  }

  function adpSanitizePayload(payload) {
    if (payload === null || payload === undefined) {
      return {};
    }
    if (Array.isArray(payload)) {
      var arr = [];
      for (var i = 0; i < payload.length; i++) {
        arr.push(adpSanitizePayload(payload[i]));
      }
      return arr;
    }
    if (typeof payload === 'object') {
      var result = {};
      for (var key in payload) {
        if (!Object.prototype.hasOwnProperty.call(payload, key)) {
          continue;
        }
        var value = payload[key];
        if (value === undefined) {
          continue;
        }
        result[key] = adpSanitizePayload(value);
      }
      return result;
    }
    return payload;
  }

  function adpSerializePayload(payload) {
    if (payload === null || payload === undefined) {
      return null;
    }
    if (typeof payload === 'string') {
      return payload;
    }
    return JSON.stringify(payload);
  }

  function adpBuildHeaders(token, companyCodes, clientId) {
    var headers = {
      'Authorization': 'Bearer ' + token,
      'Accept': 'application/json'
    };

    if (companyCodes && companyCodes.length) {
      headers['ADP-CompanyCode'] = companyCodes[0];
    }

    if (clientId) {
      headers['ADP-ClientId'] = clientId;
    }

    return headers;
  }

  function adpRequest(baseUrl, token, method, endpoint, payload, companyCodes, clientId) {
    if (!endpoint) {
      throw new Error('ADP endpoint is required');
    }

    var normalizedEndpoint = String(endpoint);
    if (normalizedEndpoint.charAt(0) !== '/') {
      normalizedEndpoint = '/' + normalizedEndpoint;
    }

    var url = adpNormalizeBaseUrl(baseUrl) + normalizedEndpoint;
    var serializedPayload = adpSerializePayload(payload);
    var headers = adpBuildHeaders(token, companyCodes, clientId);

    var requestOptions = {
      url: url,
      method: method || 'GET',
      headers: headers,
      muteHttpExceptions: true
    };

    if (serializedPayload !== null) {
      requestOptions.payload = serializedPayload;
      requestOptions.contentType = 'application/json';
    }

    return rateLimitAware(function () {
      return fetchJson(requestOptions);
    }, { attempts: 4, initialDelayMs: 500, backoffFactor: 2 });
  }

  function adpHandleTestConnection(baseUrl, token, params, inputData, companyCodes, clientId) {
    var response = adpRequest(baseUrl, token, 'GET', '/hr/v2/workers?$top=1', null, companyCodes, clientId);
    var workers = [];
    if (response && response.body && Array.isArray(response.body.workers)) {
      workers = response.body.workers;
    }
    logInfo('adp_test_connection', { status: response ? response.status : null, workersPreview: workers.length });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.adpConnection = 'ok';
    next.adpWorkersPreview = workers;
    return next;
  }

  function adpResolveWorkerId(params, inputData) {
    var candidates = [];
    if (params && params.worker_id !== undefined) {
      candidates.push(params.worker_id);
    }
    if (params && params.workerId !== undefined) {
      candidates.push(params.workerId);
    }
    if (inputData && inputData.worker_id !== undefined) {
      candidates.push(inputData.worker_id);
    }
    if (inputData && inputData.workerId !== undefined) {
      candidates.push(inputData.workerId);
    }

    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];
      if (candidate === null || candidate === undefined) {
        continue;
      }
      var trimmed = String(candidate).trim();
      if (trimmed) {
        return trimmed;
      }
    }

    return '';
  }

  function adpHandleGetWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var workerId = adpResolveWorkerId(params, inputData);
    if (!workerId) {
      throw new Error('worker_id is required for ADP get_worker');
    }

    var response = adpRequest(baseUrl, token, 'GET', '/hr/v2/workers/' + encodeURIComponent(workerId), null, companyCodes, clientId);
    logInfo('adp_get_worker', { workerId: workerId, status: response ? response.status : null });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = response ? response.body : null;
    next.workerId = workerId;
    return next;
  }

  function adpBuildCreatePayload(params) {
    if (params && typeof params.payload === 'object') {
      return adpSanitizePayload(params.payload);
    }
    if (params && typeof params.worker === 'object') {
      return adpSanitizePayload(params.worker);
    }

    var allowed = ['associateOID', 'workerDates', 'person', 'workAssignments'];
    var payload = {};
    for (var i = 0; i < allowed.length; i++) {
      var key = allowed[i];
      if (params && Object.prototype.hasOwnProperty.call(params, key) && params[key] !== undefined) {
        payload[key] = adpSanitizePayload(params[key]);
      }
    }
    return payload;
  }

  function adpHandleCreateWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var payload = adpBuildCreatePayload(params || {});
    var response = adpRequest(baseUrl, token, 'POST', '/hr/v2/workers', payload, companyCodes, clientId);
    var workerId = response && response.body && response.body.id ? response.body.id : null;
    logInfo('adp_create_worker', { status: response ? response.status : null, workerId: workerId });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = (response && response.body) ? response.body : payload;
    next.workerId = workerId;
    return next;
  }

  function adpBuildUpdatePayload(params) {
    if (params && typeof params.payload === 'object') {
      return adpSanitizePayload(params.payload);
    }
    if (params && typeof params.worker === 'object') {
      return adpSanitizePayload(params.worker);
    }
    if (params && typeof params.person === 'object') {
      return adpSanitizePayload({ person: params.person });
    }
    return adpSanitizePayload({});
  }

  function adpHandleUpdateWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var workerId = adpResolveWorkerId(params, inputData);
    if (!workerId) {
      throw new Error('worker_id is required for ADP update_worker');
    }

    var payload = adpBuildUpdatePayload(params || {});
    var response = adpRequest(baseUrl, token, 'PUT', '/hr/v2/workers/' + encodeURIComponent(workerId), payload, companyCodes, clientId);
    logInfo('adp_update_worker', { workerId: workerId, status: response ? response.status : null });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = (response && response.body) ? response.body : payload;
    next.workerId = workerId;
    return next;
  }

  function adpHandleWorkerHiredTrigger(params, inputData) {
    var payload = params && params.payload ? params.payload : (inputData && inputData.payload ? inputData.payload : inputData);
    var eventType = payload && payload.eventType ? payload.eventType : 'worker_hired';
    var worker = null;
    if (payload) {
      if (payload.worker) {
        worker = payload.worker;
      } else if (payload.data && payload.data.worker) {
        worker = payload.data.worker;
      }
    }

    logInfo('adp_worker_hired_trigger', { eventType: eventType, hasWorker: !!worker });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.eventType = eventType;
    next.worker = worker;
    next.payload = payload;
    return next;
  }

  function adpExecuteOperation(operation, inputData, params) {
    params = params || {};
    inputData = inputData || {};

    var token = requireOAuthToken('adp', { scopes: ["api","hr.worker.read","hr.worker.write","payroll.payroll_processing","payroll.payroll_reports.read"] });
    var clientId = getSecret('ADP_CLIENT_ID', { connectorKey: 'adp' });
    var clientSecret = getSecret('ADP_CLIENT_SECRET', { connectorKey: 'adp' });
    if (!clientSecret) {
      throw new Error('Missing ADP client secret');
    }
    var companySecret = getSecret('ADP_COMPANY_CODES', { connectorKey: 'adp' });
    var companyCodes = adpResolveCompanyCodes(params, inputData, companySecret);
    if (!companyCodes.length) {
      throw new Error('At least one ADP company code is required');
    }

    var baseUrl = params.baseUrl || params.base_url || 'https://api.adp.com';
    var normalizedOperation = (operation || '').toLowerCase();

    if (normalizedOperation === 'test_connection') {
      return adpHandleTestConnection(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'get_worker') {
      return adpHandleGetWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'create_worker') {
      return adpHandleCreateWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'update_worker') {
      return adpHandleUpdateWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'worker_hired') {
      return adpHandleWorkerHiredTrigger(params, inputData);
    }

    throw new Error('Unsupported ADP operation: ' + operation);
  }
}

`;
exports[`Apps Script ADP REAL_OPS builds action.adp:create_worker 1`] = `
function step_action_adp_create_worker(ctx) {
  ctx = ctx || {};
  const config = {};
  const params = adpResolveConfig(config, ctx);
  try {
    return adpExecuteOperation('create_worker', ctx, params);
  } catch (error) {
    logError('adp_create_worker_failed', { message: error && error.message ? error.message : String(error) });
    throw error;
  }
}

if (typeof adpResolveConfig !== 'function') {
  function adpResolveConfig(config, ctx) {
    if (config === null || config === undefined) {
      return {};
    }
    if (Array.isArray(config)) {
      var arr = [];
      for (var i = 0; i < config.length; i++) {
        arr.push(adpResolveConfig(config[i], ctx));
      }
      return arr;
    }
    if (typeof config === 'object') {
      var obj = {};
      for (var key in config) {
        if (!Object.prototype.hasOwnProperty.call(config, key)) continue;
        obj[key] = adpResolveConfig(config[key], ctx);
      }
      return obj;
    }
    if (typeof config === 'string') {
      var trimmed = config.trim();
      if (!trimmed) {
        return '';
      }
      return interpolate(trimmed, ctx);
    }
    return config;
  }
}


if (typeof adpExecuteOperation !== 'function') {
  function adpNormalizeBaseUrl(value) {
    var url = (value && typeof value === 'string') ? value.trim() : '';
    if (!url) {
      return 'https://api.adp.com';
    }
    if (url.charAt(url.length - 1) === '/') {
      url = url.slice(0, -1);
    }
    return url;
  }

  function adpParseCompanyCodes(value) {
    var source = [];
    if (Array.isArray(value)) {
      source = value;
    } else if (typeof value === 'string') {
      source = value.split(',');
    } else if (value !== null && value !== undefined) {
      source = [value];
    }

    var codes = [];
    for (var i = 0; i < source.length; i++) {
      var code = source[i];
      if (code === null || code === undefined) {
        continue;
      }
      var trimmed = String(code).trim();
      if (!trimmed) {
        continue;
      }
      if (codes.indexOf(trimmed) === -1) {
        codes.push(trimmed);
      }
    }
    return codes;
  }

  function adpResolveCompanyCodes(params, inputData, secretValue) {
    var codes = [];

    function pushAll(value) {
      var parsed = adpParseCompanyCodes(value);
      for (var i = 0; i < parsed.length; i++) {
        var code = parsed[i];
        if (codes.indexOf(code) === -1) {
          codes.push(code);
        }
      }
    }

    pushAll(secretValue);

    if (params && params.companyCodes !== undefined) {
      pushAll(params.companyCodes);
    }
    if (params && params.companyCode !== undefined) {
      pushAll(params.companyCode);
    }
    if (params && params.company_codes !== undefined) {
      pushAll(params.company_codes);
    }
    if (params && params.company_code !== undefined) {
      pushAll(params.company_code);
    }

    if (inputData && inputData.companyCodes !== undefined) {
      pushAll(inputData.companyCodes);
    }
    if (inputData && inputData.companyCode !== undefined) {
      pushAll(inputData.companyCode);
    }
    if (inputData && inputData.adpCompanyCodes !== undefined) {
      pushAll(inputData.adpCompanyCodes);
    }
    if (inputData && inputData.adpCompanyCode !== undefined) {
      pushAll(inputData.adpCompanyCode);
    }

    return codes;
  }

  function adpSanitizePayload(payload) {
    if (payload === null || payload === undefined) {
      return {};
    }
    if (Array.isArray(payload)) {
      var arr = [];
      for (var i = 0; i < payload.length; i++) {
        arr.push(adpSanitizePayload(payload[i]));
      }
      return arr;
    }
    if (typeof payload === 'object') {
      var result = {};
      for (var key in payload) {
        if (!Object.prototype.hasOwnProperty.call(payload, key)) {
          continue;
        }
        var value = payload[key];
        if (value === undefined) {
          continue;
        }
        result[key] = adpSanitizePayload(value);
      }
      return result;
    }
    return payload;
  }

  function adpSerializePayload(payload) {
    if (payload === null || payload === undefined) {
      return null;
    }
    if (typeof payload === 'string') {
      return payload;
    }
    return JSON.stringify(payload);
  }

  function adpBuildHeaders(token, companyCodes, clientId) {
    var headers = {
      'Authorization': 'Bearer ' + token,
      'Accept': 'application/json'
    };

    if (companyCodes && companyCodes.length) {
      headers['ADP-CompanyCode'] = companyCodes[0];
    }

    if (clientId) {
      headers['ADP-ClientId'] = clientId;
    }

    return headers;
  }

  function adpRequest(baseUrl, token, method, endpoint, payload, companyCodes, clientId) {
    if (!endpoint) {
      throw new Error('ADP endpoint is required');
    }

    var normalizedEndpoint = String(endpoint);
    if (normalizedEndpoint.charAt(0) !== '/') {
      normalizedEndpoint = '/' + normalizedEndpoint;
    }

    var url = adpNormalizeBaseUrl(baseUrl) + normalizedEndpoint;
    var serializedPayload = adpSerializePayload(payload);
    var headers = adpBuildHeaders(token, companyCodes, clientId);

    var requestOptions = {
      url: url,
      method: method || 'GET',
      headers: headers,
      muteHttpExceptions: true
    };

    if (serializedPayload !== null) {
      requestOptions.payload = serializedPayload;
      requestOptions.contentType = 'application/json';
    }

    return rateLimitAware(function () {
      return fetchJson(requestOptions);
    }, { attempts: 4, initialDelayMs: 500, backoffFactor: 2 });
  }

  function adpHandleTestConnection(baseUrl, token, params, inputData, companyCodes, clientId) {
    var response = adpRequest(baseUrl, token, 'GET', '/hr/v2/workers?$top=1', null, companyCodes, clientId);
    var workers = [];
    if (response && response.body && Array.isArray(response.body.workers)) {
      workers = response.body.workers;
    }
    logInfo('adp_test_connection', { status: response ? response.status : null, workersPreview: workers.length });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.adpConnection = 'ok';
    next.adpWorkersPreview = workers;
    return next;
  }

  function adpResolveWorkerId(params, inputData) {
    var candidates = [];
    if (params && params.worker_id !== undefined) {
      candidates.push(params.worker_id);
    }
    if (params && params.workerId !== undefined) {
      candidates.push(params.workerId);
    }
    if (inputData && inputData.worker_id !== undefined) {
      candidates.push(inputData.worker_id);
    }
    if (inputData && inputData.workerId !== undefined) {
      candidates.push(inputData.workerId);
    }

    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];
      if (candidate === null || candidate === undefined) {
        continue;
      }
      var trimmed = String(candidate).trim();
      if (trimmed) {
        return trimmed;
      }
    }

    return '';
  }

  function adpHandleGetWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var workerId = adpResolveWorkerId(params, inputData);
    if (!workerId) {
      throw new Error('worker_id is required for ADP get_worker');
    }

    var response = adpRequest(baseUrl, token, 'GET', '/hr/v2/workers/' + encodeURIComponent(workerId), null, companyCodes, clientId);
    logInfo('adp_get_worker', { workerId: workerId, status: response ? response.status : null });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = response ? response.body : null;
    next.workerId = workerId;
    return next;
  }

  function adpBuildCreatePayload(params) {
    if (params && typeof params.payload === 'object') {
      return adpSanitizePayload(params.payload);
    }
    if (params && typeof params.worker === 'object') {
      return adpSanitizePayload(params.worker);
    }

    var allowed = ['associateOID', 'workerDates', 'person', 'workAssignments'];
    var payload = {};
    for (var i = 0; i < allowed.length; i++) {
      var key = allowed[i];
      if (params && Object.prototype.hasOwnProperty.call(params, key) && params[key] !== undefined) {
        payload[key] = adpSanitizePayload(params[key]);
      }
    }
    return payload;
  }

  function adpHandleCreateWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var payload = adpBuildCreatePayload(params || {});
    var response = adpRequest(baseUrl, token, 'POST', '/hr/v2/workers', payload, companyCodes, clientId);
    var workerId = response && response.body && response.body.id ? response.body.id : null;
    logInfo('adp_create_worker', { status: response ? response.status : null, workerId: workerId });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = (response && response.body) ? response.body : payload;
    next.workerId = workerId;
    return next;
  }

  function adpBuildUpdatePayload(params) {
    if (params && typeof params.payload === 'object') {
      return adpSanitizePayload(params.payload);
    }
    if (params && typeof params.worker === 'object') {
      return adpSanitizePayload(params.worker);
    }
    if (params && typeof params.person === 'object') {
      return adpSanitizePayload({ person: params.person });
    }
    return adpSanitizePayload({});
  }

  function adpHandleUpdateWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var workerId = adpResolveWorkerId(params, inputData);
    if (!workerId) {
      throw new Error('worker_id is required for ADP update_worker');
    }

    var payload = adpBuildUpdatePayload(params || {});
    var response = adpRequest(baseUrl, token, 'PUT', '/hr/v2/workers/' + encodeURIComponent(workerId), payload, companyCodes, clientId);
    logInfo('adp_update_worker', { workerId: workerId, status: response ? response.status : null });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = (response && response.body) ? response.body : payload;
    next.workerId = workerId;
    return next;
  }

  function adpHandleWorkerHiredTrigger(params, inputData) {
    var payload = params && params.payload ? params.payload : (inputData && inputData.payload ? inputData.payload : inputData);
    var eventType = payload && payload.eventType ? payload.eventType : 'worker_hired';
    var worker = null;
    if (payload) {
      if (payload.worker) {
        worker = payload.worker;
      } else if (payload.data && payload.data.worker) {
        worker = payload.data.worker;
      }
    }

    logInfo('adp_worker_hired_trigger', { eventType: eventType, hasWorker: !!worker });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.eventType = eventType;
    next.worker = worker;
    next.payload = payload;
    return next;
  }

  function adpExecuteOperation(operation, inputData, params) {
    params = params || {};
    inputData = inputData || {};

    var token = requireOAuthToken('adp', { scopes: ["api","hr.worker.read","hr.worker.write","payroll.payroll_processing","payroll.payroll_reports.read"] });
    var clientId = getSecret('ADP_CLIENT_ID', { connectorKey: 'adp' });
    var clientSecret = getSecret('ADP_CLIENT_SECRET', { connectorKey: 'adp' });
    if (!clientSecret) {
      throw new Error('Missing ADP client secret');
    }
    var companySecret = getSecret('ADP_COMPANY_CODES', { connectorKey: 'adp' });
    var companyCodes = adpResolveCompanyCodes(params, inputData, companySecret);
    if (!companyCodes.length) {
      throw new Error('At least one ADP company code is required');
    }

    var baseUrl = params.baseUrl || params.base_url || 'https://api.adp.com';
    var normalizedOperation = (operation || '').toLowerCase();

    if (normalizedOperation === 'test_connection') {
      return adpHandleTestConnection(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'get_worker') {
      return adpHandleGetWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'create_worker') {
      return adpHandleCreateWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'update_worker') {
      return adpHandleUpdateWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'worker_hired') {
      return adpHandleWorkerHiredTrigger(params, inputData);
    }

    throw new Error('Unsupported ADP operation: ' + operation);
  }
}

`;
exports[`Apps Script ADP REAL_OPS builds action.adp:update_worker 1`] = `
function step_action_adp_update_worker(ctx) {
  ctx = ctx || {};
  const config = {};
  const params = adpResolveConfig(config, ctx);
  try {
    return adpExecuteOperation('update_worker', ctx, params);
  } catch (error) {
    logError('adp_update_worker_failed', { message: error && error.message ? error.message : String(error) });
    throw error;
  }
}

if (typeof adpResolveConfig !== 'function') {
  function adpResolveConfig(config, ctx) {
    if (config === null || config === undefined) {
      return {};
    }
    if (Array.isArray(config)) {
      var arr = [];
      for (var i = 0; i < config.length; i++) {
        arr.push(adpResolveConfig(config[i], ctx));
      }
      return arr;
    }
    if (typeof config === 'object') {
      var obj = {};
      for (var key in config) {
        if (!Object.prototype.hasOwnProperty.call(config, key)) continue;
        obj[key] = adpResolveConfig(config[key], ctx);
      }
      return obj;
    }
    if (typeof config === 'string') {
      var trimmed = config.trim();
      if (!trimmed) {
        return '';
      }
      return interpolate(trimmed, ctx);
    }
    return config;
  }
}


if (typeof adpExecuteOperation !== 'function') {
  function adpNormalizeBaseUrl(value) {
    var url = (value && typeof value === 'string') ? value.trim() : '';
    if (!url) {
      return 'https://api.adp.com';
    }
    if (url.charAt(url.length - 1) === '/') {
      url = url.slice(0, -1);
    }
    return url;
  }

  function adpParseCompanyCodes(value) {
    var source = [];
    if (Array.isArray(value)) {
      source = value;
    } else if (typeof value === 'string') {
      source = value.split(',');
    } else if (value !== null && value !== undefined) {
      source = [value];
    }

    var codes = [];
    for (var i = 0; i < source.length; i++) {
      var code = source[i];
      if (code === null || code === undefined) {
        continue;
      }
      var trimmed = String(code).trim();
      if (!trimmed) {
        continue;
      }
      if (codes.indexOf(trimmed) === -1) {
        codes.push(trimmed);
      }
    }
    return codes;
  }

  function adpResolveCompanyCodes(params, inputData, secretValue) {
    var codes = [];

    function pushAll(value) {
      var parsed = adpParseCompanyCodes(value);
      for (var i = 0; i < parsed.length; i++) {
        var code = parsed[i];
        if (codes.indexOf(code) === -1) {
          codes.push(code);
        }
      }
    }

    pushAll(secretValue);

    if (params && params.companyCodes !== undefined) {
      pushAll(params.companyCodes);
    }
    if (params && params.companyCode !== undefined) {
      pushAll(params.companyCode);
    }
    if (params && params.company_codes !== undefined) {
      pushAll(params.company_codes);
    }
    if (params && params.company_code !== undefined) {
      pushAll(params.company_code);
    }

    if (inputData && inputData.companyCodes !== undefined) {
      pushAll(inputData.companyCodes);
    }
    if (inputData && inputData.companyCode !== undefined) {
      pushAll(inputData.companyCode);
    }
    if (inputData && inputData.adpCompanyCodes !== undefined) {
      pushAll(inputData.adpCompanyCodes);
    }
    if (inputData && inputData.adpCompanyCode !== undefined) {
      pushAll(inputData.adpCompanyCode);
    }

    return codes;
  }

  function adpSanitizePayload(payload) {
    if (payload === null || payload === undefined) {
      return {};
    }
    if (Array.isArray(payload)) {
      var arr = [];
      for (var i = 0; i < payload.length; i++) {
        arr.push(adpSanitizePayload(payload[i]));
      }
      return arr;
    }
    if (typeof payload === 'object') {
      var result = {};
      for (var key in payload) {
        if (!Object.prototype.hasOwnProperty.call(payload, key)) {
          continue;
        }
        var value = payload[key];
        if (value === undefined) {
          continue;
        }
        result[key] = adpSanitizePayload(value);
      }
      return result;
    }
    return payload;
  }

  function adpSerializePayload(payload) {
    if (payload === null || payload === undefined) {
      return null;
    }
    if (typeof payload === 'string') {
      return payload;
    }
    return JSON.stringify(payload);
  }

  function adpBuildHeaders(token, companyCodes, clientId) {
    var headers = {
      'Authorization': 'Bearer ' + token,
      'Accept': 'application/json'
    };

    if (companyCodes && companyCodes.length) {
      headers['ADP-CompanyCode'] = companyCodes[0];
    }

    if (clientId) {
      headers['ADP-ClientId'] = clientId;
    }

    return headers;
  }

  function adpRequest(baseUrl, token, method, endpoint, payload, companyCodes, clientId) {
    if (!endpoint) {
      throw new Error('ADP endpoint is required');
    }

    var normalizedEndpoint = String(endpoint);
    if (normalizedEndpoint.charAt(0) !== '/') {
      normalizedEndpoint = '/' + normalizedEndpoint;
    }

    var url = adpNormalizeBaseUrl(baseUrl) + normalizedEndpoint;
    var serializedPayload = adpSerializePayload(payload);
    var headers = adpBuildHeaders(token, companyCodes, clientId);

    var requestOptions = {
      url: url,
      method: method || 'GET',
      headers: headers,
      muteHttpExceptions: true
    };

    if (serializedPayload !== null) {
      requestOptions.payload = serializedPayload;
      requestOptions.contentType = 'application/json';
    }

    return rateLimitAware(function () {
      return fetchJson(requestOptions);
    }, { attempts: 4, initialDelayMs: 500, backoffFactor: 2 });
  }

  function adpHandleTestConnection(baseUrl, token, params, inputData, companyCodes, clientId) {
    var response = adpRequest(baseUrl, token, 'GET', '/hr/v2/workers?$top=1', null, companyCodes, clientId);
    var workers = [];
    if (response && response.body && Array.isArray(response.body.workers)) {
      workers = response.body.workers;
    }
    logInfo('adp_test_connection', { status: response ? response.status : null, workersPreview: workers.length });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.adpConnection = 'ok';
    next.adpWorkersPreview = workers;
    return next;
  }

  function adpResolveWorkerId(params, inputData) {
    var candidates = [];
    if (params && params.worker_id !== undefined) {
      candidates.push(params.worker_id);
    }
    if (params && params.workerId !== undefined) {
      candidates.push(params.workerId);
    }
    if (inputData && inputData.worker_id !== undefined) {
      candidates.push(inputData.worker_id);
    }
    if (inputData && inputData.workerId !== undefined) {
      candidates.push(inputData.workerId);
    }

    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];
      if (candidate === null || candidate === undefined) {
        continue;
      }
      var trimmed = String(candidate).trim();
      if (trimmed) {
        return trimmed;
      }
    }

    return '';
  }

  function adpHandleGetWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var workerId = adpResolveWorkerId(params, inputData);
    if (!workerId) {
      throw new Error('worker_id is required for ADP get_worker');
    }

    var response = adpRequest(baseUrl, token, 'GET', '/hr/v2/workers/' + encodeURIComponent(workerId), null, companyCodes, clientId);
    logInfo('adp_get_worker', { workerId: workerId, status: response ? response.status : null });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = response ? response.body : null;
    next.workerId = workerId;
    return next;
  }

  function adpBuildCreatePayload(params) {
    if (params && typeof params.payload === 'object') {
      return adpSanitizePayload(params.payload);
    }
    if (params && typeof params.worker === 'object') {
      return adpSanitizePayload(params.worker);
    }

    var allowed = ['associateOID', 'workerDates', 'person', 'workAssignments'];
    var payload = {};
    for (var i = 0; i < allowed.length; i++) {
      var key = allowed[i];
      if (params && Object.prototype.hasOwnProperty.call(params, key) && params[key] !== undefined) {
        payload[key] = adpSanitizePayload(params[key]);
      }
    }
    return payload;
  }

  function adpHandleCreateWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var payload = adpBuildCreatePayload(params || {});
    var response = adpRequest(baseUrl, token, 'POST', '/hr/v2/workers', payload, companyCodes, clientId);
    var workerId = response && response.body && response.body.id ? response.body.id : null;
    logInfo('adp_create_worker', { status: response ? response.status : null, workerId: workerId });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = (response && response.body) ? response.body : payload;
    next.workerId = workerId;
    return next;
  }

  function adpBuildUpdatePayload(params) {
    if (params && typeof params.payload === 'object') {
      return adpSanitizePayload(params.payload);
    }
    if (params && typeof params.worker === 'object') {
      return adpSanitizePayload(params.worker);
    }
    if (params && typeof params.person === 'object') {
      return adpSanitizePayload({ person: params.person });
    }
    return adpSanitizePayload({});
  }

  function adpHandleUpdateWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var workerId = adpResolveWorkerId(params, inputData);
    if (!workerId) {
      throw new Error('worker_id is required for ADP update_worker');
    }

    var payload = adpBuildUpdatePayload(params || {});
    var response = adpRequest(baseUrl, token, 'PUT', '/hr/v2/workers/' + encodeURIComponent(workerId), payload, companyCodes, clientId);
    logInfo('adp_update_worker', { workerId: workerId, status: response ? response.status : null });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = (response && response.body) ? response.body : payload;
    next.workerId = workerId;
    return next;
  }

  function adpHandleWorkerHiredTrigger(params, inputData) {
    var payload = params && params.payload ? params.payload : (inputData && inputData.payload ? inputData.payload : inputData);
    var eventType = payload && payload.eventType ? payload.eventType : 'worker_hired';
    var worker = null;
    if (payload) {
      if (payload.worker) {
        worker = payload.worker;
      } else if (payload.data && payload.data.worker) {
        worker = payload.data.worker;
      }
    }

    logInfo('adp_worker_hired_trigger', { eventType: eventType, hasWorker: !!worker });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.eventType = eventType;
    next.worker = worker;
    next.payload = payload;
    return next;
  }

  function adpExecuteOperation(operation, inputData, params) {
    params = params || {};
    inputData = inputData || {};

    var token = requireOAuthToken('adp', { scopes: ["api","hr.worker.read","hr.worker.write","payroll.payroll_processing","payroll.payroll_reports.read"] });
    var clientId = getSecret('ADP_CLIENT_ID', { connectorKey: 'adp' });
    var clientSecret = getSecret('ADP_CLIENT_SECRET', { connectorKey: 'adp' });
    if (!clientSecret) {
      throw new Error('Missing ADP client secret');
    }
    var companySecret = getSecret('ADP_COMPANY_CODES', { connectorKey: 'adp' });
    var companyCodes = adpResolveCompanyCodes(params, inputData, companySecret);
    if (!companyCodes.length) {
      throw new Error('At least one ADP company code is required');
    }

    var baseUrl = params.baseUrl || params.base_url || 'https://api.adp.com';
    var normalizedOperation = (operation || '').toLowerCase();

    if (normalizedOperation === 'test_connection') {
      return adpHandleTestConnection(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'get_worker') {
      return adpHandleGetWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'create_worker') {
      return adpHandleCreateWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'update_worker') {
      return adpHandleUpdateWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'worker_hired') {
      return adpHandleWorkerHiredTrigger(params, inputData);
    }

    throw new Error('Unsupported ADP operation: ' + operation);
  }
}

`;
exports[`Apps Script ADP REAL_OPS builds trigger.adp:worker_hired 1`] = `
function trigger_trigger_adp_worker_hired(ctx) {
  ctx = ctx || {};
  const config = {};
  const params = adpResolveConfig(config, ctx);
  try {
    return adpExecuteOperation('worker_hired', ctx, params);
  } catch (error) {
    logError('adp_worker_hired_trigger_failed', { message: error && error.message ? error.message : String(error) });
    throw error;
  }
}

if (typeof adpResolveConfig !== 'function') {
  function adpResolveConfig(config, ctx) {
    if (config === null || config === undefined) {
      return {};
    }
    if (Array.isArray(config)) {
      var arr = [];
      for (var i = 0; i < config.length; i++) {
        arr.push(adpResolveConfig(config[i], ctx));
      }
      return arr;
    }
    if (typeof config === 'object') {
      var obj = {};
      for (var key in config) {
        if (!Object.prototype.hasOwnProperty.call(config, key)) continue;
        obj[key] = adpResolveConfig(config[key], ctx);
      }
      return obj;
    }
    if (typeof config === 'string') {
      var trimmed = config.trim();
      if (!trimmed) {
        return '';
      }
      return interpolate(trimmed, ctx);
    }
    return config;
  }
}


if (typeof adpExecuteOperation !== 'function') {
  function adpNormalizeBaseUrl(value) {
    var url = (value && typeof value === 'string') ? value.trim() : '';
    if (!url) {
      return 'https://api.adp.com';
    }
    if (url.charAt(url.length - 1) === '/') {
      url = url.slice(0, -1);
    }
    return url;
  }

  function adpParseCompanyCodes(value) {
    var source = [];
    if (Array.isArray(value)) {
      source = value;
    } else if (typeof value === 'string') {
      source = value.split(',');
    } else if (value !== null && value !== undefined) {
      source = [value];
    }

    var codes = [];
    for (var i = 0; i < source.length; i++) {
      var code = source[i];
      if (code === null || code === undefined) {
        continue;
      }
      var trimmed = String(code).trim();
      if (!trimmed) {
        continue;
      }
      if (codes.indexOf(trimmed) === -1) {
        codes.push(trimmed);
      }
    }
    return codes;
  }

  function adpResolveCompanyCodes(params, inputData, secretValue) {
    var codes = [];

    function pushAll(value) {
      var parsed = adpParseCompanyCodes(value);
      for (var i = 0; i < parsed.length; i++) {
        var code = parsed[i];
        if (codes.indexOf(code) === -1) {
          codes.push(code);
        }
      }
    }

    pushAll(secretValue);

    if (params && params.companyCodes !== undefined) {
      pushAll(params.companyCodes);
    }
    if (params && params.companyCode !== undefined) {
      pushAll(params.companyCode);
    }
    if (params && params.company_codes !== undefined) {
      pushAll(params.company_codes);
    }
    if (params && params.company_code !== undefined) {
      pushAll(params.company_code);
    }

    if (inputData && inputData.companyCodes !== undefined) {
      pushAll(inputData.companyCodes);
    }
    if (inputData && inputData.companyCode !== undefined) {
      pushAll(inputData.companyCode);
    }
    if (inputData && inputData.adpCompanyCodes !== undefined) {
      pushAll(inputData.adpCompanyCodes);
    }
    if (inputData && inputData.adpCompanyCode !== undefined) {
      pushAll(inputData.adpCompanyCode);
    }

    return codes;
  }

  function adpSanitizePayload(payload) {
    if (payload === null || payload === undefined) {
      return {};
    }
    if (Array.isArray(payload)) {
      var arr = [];
      for (var i = 0; i < payload.length; i++) {
        arr.push(adpSanitizePayload(payload[i]));
      }
      return arr;
    }
    if (typeof payload === 'object') {
      var result = {};
      for (var key in payload) {
        if (!Object.prototype.hasOwnProperty.call(payload, key)) {
          continue;
        }
        var value = payload[key];
        if (value === undefined) {
          continue;
        }
        result[key] = adpSanitizePayload(value);
      }
      return result;
    }
    return payload;
  }

  function adpSerializePayload(payload) {
    if (payload === null || payload === undefined) {
      return null;
    }
    if (typeof payload === 'string') {
      return payload;
    }
    return JSON.stringify(payload);
  }

  function adpBuildHeaders(token, companyCodes, clientId) {
    var headers = {
      'Authorization': 'Bearer ' + token,
      'Accept': 'application/json'
    };

    if (companyCodes && companyCodes.length) {
      headers['ADP-CompanyCode'] = companyCodes[0];
    }

    if (clientId) {
      headers['ADP-ClientId'] = clientId;
    }

    return headers;
  }

  function adpRequest(baseUrl, token, method, endpoint, payload, companyCodes, clientId) {
    if (!endpoint) {
      throw new Error('ADP endpoint is required');
    }

    var normalizedEndpoint = String(endpoint);
    if (normalizedEndpoint.charAt(0) !== '/') {
      normalizedEndpoint = '/' + normalizedEndpoint;
    }

    var url = adpNormalizeBaseUrl(baseUrl) + normalizedEndpoint;
    var serializedPayload = adpSerializePayload(payload);
    var headers = adpBuildHeaders(token, companyCodes, clientId);

    var requestOptions = {
      url: url,
      method: method || 'GET',
      headers: headers,
      muteHttpExceptions: true
    };

    if (serializedPayload !== null) {
      requestOptions.payload = serializedPayload;
      requestOptions.contentType = 'application/json';
    }

    return rateLimitAware(function () {
      return fetchJson(requestOptions);
    }, { attempts: 4, initialDelayMs: 500, backoffFactor: 2 });
  }

  function adpHandleTestConnection(baseUrl, token, params, inputData, companyCodes, clientId) {
    var response = adpRequest(baseUrl, token, 'GET', '/hr/v2/workers?$top=1', null, companyCodes, clientId);
    var workers = [];
    if (response && response.body && Array.isArray(response.body.workers)) {
      workers = response.body.workers;
    }
    logInfo('adp_test_connection', { status: response ? response.status : null, workersPreview: workers.length });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.adpConnection = 'ok';
    next.adpWorkersPreview = workers;
    return next;
  }

  function adpResolveWorkerId(params, inputData) {
    var candidates = [];
    if (params && params.worker_id !== undefined) {
      candidates.push(params.worker_id);
    }
    if (params && params.workerId !== undefined) {
      candidates.push(params.workerId);
    }
    if (inputData && inputData.worker_id !== undefined) {
      candidates.push(inputData.worker_id);
    }
    if (inputData && inputData.workerId !== undefined) {
      candidates.push(inputData.workerId);
    }

    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];
      if (candidate === null || candidate === undefined) {
        continue;
      }
      var trimmed = String(candidate).trim();
      if (trimmed) {
        return trimmed;
      }
    }

    return '';
  }

  function adpHandleGetWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var workerId = adpResolveWorkerId(params, inputData);
    if (!workerId) {
      throw new Error('worker_id is required for ADP get_worker');
    }

    var response = adpRequest(baseUrl, token, 'GET', '/hr/v2/workers/' + encodeURIComponent(workerId), null, companyCodes, clientId);
    logInfo('adp_get_worker', { workerId: workerId, status: response ? response.status : null });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = response ? response.body : null;
    next.workerId = workerId;
    return next;
  }

  function adpBuildCreatePayload(params) {
    if (params && typeof params.payload === 'object') {
      return adpSanitizePayload(params.payload);
    }
    if (params && typeof params.worker === 'object') {
      return adpSanitizePayload(params.worker);
    }

    var allowed = ['associateOID', 'workerDates', 'person', 'workAssignments'];
    var payload = {};
    for (var i = 0; i < allowed.length; i++) {
      var key = allowed[i];
      if (params && Object.prototype.hasOwnProperty.call(params, key) && params[key] !== undefined) {
        payload[key] = adpSanitizePayload(params[key]);
      }
    }
    return payload;
  }

  function adpHandleCreateWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var payload = adpBuildCreatePayload(params || {});
    var response = adpRequest(baseUrl, token, 'POST', '/hr/v2/workers', payload, companyCodes, clientId);
    var workerId = response && response.body && response.body.id ? response.body.id : null;
    logInfo('adp_create_worker', { status: response ? response.status : null, workerId: workerId });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = (response && response.body) ? response.body : payload;
    next.workerId = workerId;
    return next;
  }

  function adpBuildUpdatePayload(params) {
    if (params && typeof params.payload === 'object') {
      return adpSanitizePayload(params.payload);
    }
    if (params && typeof params.worker === 'object') {
      return adpSanitizePayload(params.worker);
    }
    if (params && typeof params.person === 'object') {
      return adpSanitizePayload({ person: params.person });
    }
    return adpSanitizePayload({});
  }

  function adpHandleUpdateWorker(baseUrl, token, params, inputData, companyCodes, clientId) {
    var workerId = adpResolveWorkerId(params, inputData);
    if (!workerId) {
      throw new Error('worker_id is required for ADP update_worker');
    }

    var payload = adpBuildUpdatePayload(params || {});
    var response = adpRequest(baseUrl, token, 'PUT', '/hr/v2/workers/' + encodeURIComponent(workerId), payload, companyCodes, clientId);
    logInfo('adp_update_worker', { workerId: workerId, status: response ? response.status : null });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.worker = (response && response.body) ? response.body : payload;
    next.workerId = workerId;
    return next;
  }

  function adpHandleWorkerHiredTrigger(params, inputData) {
    var payload = params && params.payload ? params.payload : (inputData && inputData.payload ? inputData.payload : inputData);
    var eventType = payload && payload.eventType ? payload.eventType : 'worker_hired';
    var worker = null;
    if (payload) {
      if (payload.worker) {
        worker = payload.worker;
      } else if (payload.data && payload.data.worker) {
        worker = payload.data.worker;
      }
    }

    logInfo('adp_worker_hired_trigger', { eventType: eventType, hasWorker: !!worker });

    var next = Object.assign({}, inputData || {});
    next.success = true;
    next.eventType = eventType;
    next.worker = worker;
    next.payload = payload;
    return next;
  }

  function adpExecuteOperation(operation, inputData, params) {
    params = params || {};
    inputData = inputData || {};

    var token = requireOAuthToken('adp', { scopes: ["api","hr.worker.read","hr.worker.write","payroll.payroll_processing","payroll.payroll_reports.read"] });
    var clientId = getSecret('ADP_CLIENT_ID', { connectorKey: 'adp' });
    var clientSecret = getSecret('ADP_CLIENT_SECRET', { connectorKey: 'adp' });
    if (!clientSecret) {
      throw new Error('Missing ADP client secret');
    }
    var companySecret = getSecret('ADP_COMPANY_CODES', { connectorKey: 'adp' });
    var companyCodes = adpResolveCompanyCodes(params, inputData, companySecret);
    if (!companyCodes.length) {
      throw new Error('At least one ADP company code is required');
    }

    var baseUrl = params.baseUrl || params.base_url || 'https://api.adp.com';
    var normalizedOperation = (operation || '').toLowerCase();

    if (normalizedOperation === 'test_connection') {
      return adpHandleTestConnection(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'get_worker') {
      return adpHandleGetWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'create_worker') {
      return adpHandleCreateWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'update_worker') {
      return adpHandleUpdateWorker(baseUrl, token, params, inputData, companyCodes, clientId);
    }
    if (normalizedOperation === 'worker_hired') {
      return adpHandleWorkerHiredTrigger(params, inputData);
    }

    throw new Error('Unsupported ADP operation: ' + operation);
  }
}

`;
