exports[`Apps Script Notion REAL_OPS builds action.notion:create_page 1`] = `
function step_action_notion_create_page(ctx) {
  ctx = ctx || {};

  const accessToken = requireOAuthToken('notion', { scopes: ['read_content', 'update_content', 'insert_content'] });

  const parentConfig = {"type":"database_id"};
  const propertiesConfig = {"Name":{"title":[{"text":{"content":"{{pageTitle}}"}}]},"Status":{"select":{"name":"In Progress"}}};
  const childrenConfig = [{"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"Automation generated content."}}]}}];
  const iconConfig = {"type":"emoji","emoji":"âš¡"};
  const coverConfig = {"type":"external","external":{"url":"https://example.com/cover.png"}};

  function optionalSecret(name) {
    try {
      const value = getSecret(name, { connectorKey: 'notion' });
      return typeof value === 'string' ? value.trim() : String(value || '').trim();
    } catch (error) {
      return '';
    }
  }

  function resolveString(template, options) {
    if (template === null || template === undefined) {
      return '';
    }
    if (typeof template !== 'string') {
      return String(template);
    }
    const trimmed = template.trim();
    if (!trimmed && options && options.allowEmpty) {
      return '';
    }
    const resolved = interpolate(trimmed, ctx).trim();
    if (!resolved && options && options.fallbackSecret) {
      const fallback = optionalSecret(options.fallbackSecret);
      if (fallback) {
        return fallback;
      }
    }
    return resolved;
  }

  function resolveStructured(value) {
    if (value === null || value === undefined) {
      return undefined;
    }
    if (Array.isArray(value)) {
      const result = [];
      for (let i = 0; i < value.length; i++) {
        result.push(resolveStructured(value[i]));
      }
      return result;
    }
    if (typeof value === 'object') {
      const result = {};
      for (const key in value) {
        if (Object.prototype.hasOwnProperty.call(value, key)) {
          result[key] = resolveStructured(value[key]);
        }
      }
      return result;
    }
    if (typeof value === 'string') {
      return interpolate(value, ctx);
    }
    return value;
  }

  function ensureParent(config) {
    if (!config || typeof config !== 'object') {
      throw new Error('Notion create_page requires a parent configuration.');
    }
    const type = typeof config.type === 'string' ? config.type.trim().toLowerCase() : '';
    if (!type) {
      throw new Error("Notion create_page requires parent.type set to 'database_id', 'page_id', or 'workspace'.");
    }

    if (type === 'database_id') {
      const raw = config.database_id !== undefined ? config.database_id : (config.databaseId !== undefined ? config.databaseId : null);
      const databaseId = resolveString(raw ?? '', { fallbackSecret: 'NOTION_DATABASE_ID' });
      if (!databaseId) {
        throw new Error('Notion create_page requires a database_id in the manifest or the NOTION_DATABASE_ID script property.');
      }
      return { database_id: databaseId };
    }

    if (type === 'page_id') {
      const raw = config.page_id !== undefined ? config.page_id : (config.pageId !== undefined ? config.pageId : null);
      const pageId = resolveString(raw ?? '', { fallbackSecret: 'NOTION_PAGE_ID' });
      if (!pageId) {
        throw new Error('Notion create_page requires a page_id in the manifest or the NOTION_PAGE_ID script property.');
      }
      return { page_id: pageId };
    }

    if (type === 'workspace') {
      return { workspace: true };
    }

    throw new Error('Unsupported Notion parent type: ' + type + '.');
  }

  const parent = ensureParent(parentConfig);
  const properties = resolveStructured(propertiesConfig);
  if (!properties || Object.keys(properties).length === 0) {
    throw new Error('Notion create_page requires at least one property. Configure the Properties block in the manifest.');
  }

  const requestBody = {
    parent: parent,
    properties: properties
  };

  const children = resolveStructured(childrenConfig);
  if (children && Array.isArray(children) && children.length > 0) {
    requestBody.children = children;
  }

  const icon = resolveStructured(iconConfig);
  if (icon && typeof icon === 'object' && Object.keys(icon).length > 0) {
    requestBody.icon = icon;
  }

  const cover = resolveStructured(coverConfig);
  if (cover && typeof cover === 'object' && Object.keys(cover).length > 0) {
    requestBody.cover = cover;
  }

  try {
    const response = rateLimitAware(
      () => fetchJson({
        url: 'https://api.notion.com/v1/pages',
        method: 'POST',
        headers: {
          'Authorization': 'Bearer ' + accessToken,
          'Content-Type': 'application/json',
          'Notion-Version': '2022-06-28'
        },
        payload: JSON.stringify(requestBody),
        contentType: 'application/json'
      }),
      { attempts: 4, initialDelayMs: 750, maxDelayMs: 6000, jitter: 0.25 }
    );

    const page = response.body || {};
    const headers = response.headers || {};
    const requestId = headers['x-request-id'] || headers['X-Request-Id'] || null;

    ctx.notionPageId = page.id || null;
    ctx.notionPageUrl = page.url || null;
    ctx.notionPage = page;
    ctx.notionCreatePageResponse = {
      status: response.status,
      requestId: requestId,
      parent: parent,
      headers: headers,
      body: page
    };

    logInfo('notion_create_page_success', {
      pageId: ctx.notionPageId || null,
      parentType: parent.database_id ? 'database_id' : parent.page_id ? 'page_id' : 'workspace',
      requestId: requestId || undefined
    });

    return ctx;
  } catch (error) {
    const status = error && typeof error.status === 'number' ? error.status : null;
    const body = error && Object.prototype.hasOwnProperty.call(error, 'body') ? error.body : null;
    const providerCode = body && typeof body === 'object' ? body.code || null : null;
    const providerMessage = body && typeof body === 'object' && body.message ? body.message : (error && error.message ? error.message : String(error));

    logError('notion_create_page_failed', {
      status: status,
      providerCode: providerCode,
      message: providerMessage
    });

    throw new Error('Notion create_page failed: ' + (providerCode ? providerCode + ' ' : '') + providerMessage);
  }
}`;
