exports[`Apps Script Webflow REAL_OPS builds action.webflow:test_connection 1`] = `
function step_action_webflow_test_connection(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    Accept: 'application/json'
  };

  try {
    const response = rateLimitAware(() => fetchJson({
      url: 'https://api.webflow.com/sites',
      method: 'GET',
      headers: headers
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    const sites = Array.isArray(response.body)
      ? response.body
      : (response.body && Array.isArray(response.body.sites) ? response.body.sites : []);

    ctx.webflowConnectionTested = true;
    ctx.webflowSiteCount = sites.length;

    logInfo('webflow_test_connection_success', {
      status: response.status,
      siteCount: sites.length
    });

    return ctx;
  } catch (error) {
    logError('webflow_test_connection_failed', {
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:list_sites 1`] = `
function step_action_webflow_list_sites(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    Accept: 'application/json'
  };

  try {
    const response = rateLimitAware(() => fetchJson({
      url: 'https://api.webflow.com/sites',
      method: 'GET',
      headers: headers
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    const sites = Array.isArray(response.body)
      ? response.body
      : (response.body && Array.isArray(response.body.sites) ? response.body.sites : []);

    ctx.webflowSites = sites;
    ctx.webflowSiteCount = sites.length;

    logInfo('webflow_list_sites_success', {
      status: response.status,
      siteCount: sites.length
    });

    return ctx;
  } catch (error) {
    logError('webflow_list_sites_failed', {
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:get_site 1`] = `
function step_action_webflow_get_site(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });
  const config = {"site_id":"site-123"};

  function optionalSecret(name) {
    try {
      return getSecret(name, { connectorKey: 'webflow' });
    } catch (error) {
      return '';
    }
  }

  function resolveSiteId() {
    const template = config.site_id || config.siteId || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (resolved) {
      return resolved;
    }
    const fallback = optionalSecret('WEBFLOW_DEFAULT_SITE_ID');
    if (fallback) {
      return fallback;
    }
    throw new Error('Webflow get_site requires a Site ID. Provide one in the node configuration or store WEBFLOW_DEFAULT_SITE_ID in Script Properties.');
  }

  const siteId = resolveSiteId();

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    Accept: 'application/json'
  };

  try {
    const response = rateLimitAware(() => fetchJson({
      url: 'https://api.webflow.com/sites/' + encodeURIComponent(siteId),
      method: 'GET',
      headers: headers
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    ctx.webflowSiteId = siteId;
    ctx.webflowSite = response.body || {};

    logInfo('webflow_get_site_success', {
      status: response.status,
      siteId: siteId
    });

    return ctx;
  } catch (error) {
    logError('webflow_get_site_failed', {
      siteId: siteId,
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:list_collections 1`] = `
function step_action_webflow_list_collections(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });
  const config = {"site_id":"site-123"};

  function optionalSecret(name) {
    try {
      return getSecret(name, { connectorKey: 'webflow' });
    } catch (error) {
      return '';
    }
  }

  function resolveSiteId() {
    const template = config.site_id || config.siteId || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (resolved) {
      return resolved;
    }
    const fallback = optionalSecret('WEBFLOW_DEFAULT_SITE_ID');
    if (fallback) {
      return fallback;
    }
    throw new Error('Webflow list_collections requires a Site ID. Configure one or set WEBFLOW_DEFAULT_SITE_ID.');
  }

  const siteId = resolveSiteId();

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    Accept: 'application/json'
  };

  try {
    const response = rateLimitAware(() => fetchJson({
      url: 'https://api.webflow.com/sites/' + encodeURIComponent(siteId) + '/collections',
      method: 'GET',
      headers: headers
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    const collections = Array.isArray(response.body)
      ? response.body
      : (response.body && Array.isArray(response.body.collections) ? response.body.collections : []);

    ctx.webflowSiteId = siteId;
    ctx.webflowCollections = collections;

    logInfo('webflow_list_collections_success', {
      status: response.status,
      siteId: siteId,
      collectionCount: collections.length
    });

    return ctx;
  } catch (error) {
    logError('webflow_list_collections_failed', {
      siteId: siteId,
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:get_collection 1`] = `
function step_action_webflow_get_collection(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });
  const config = {"collection_id":"collection-123"};

  function resolveCollectionId() {
    const template = config.collection_id || config.collectionId || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (!resolved) {
      throw new Error('Webflow get_collection requires a Collection ID.');
    }
    return resolved;
  }

  const collectionId = resolveCollectionId();

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    Accept: 'application/json'
  };

  try {
    const response = rateLimitAware(() => fetchJson({
      url: 'https://api.webflow.com/collections/' + encodeURIComponent(collectionId),
      method: 'GET',
      headers: headers
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    ctx.webflowCollectionId = collectionId;
    ctx.webflowCollection = response.body || {};

    logInfo('webflow_get_collection_success', {
      status: response.status,
      collectionId: collectionId
    });

    return ctx;
  } catch (error) {
    logError('webflow_get_collection_failed', {
      collectionId: collectionId,
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:list_collection_items 1`] = `
function step_action_webflow_list_collection_items(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });
  const config = {"collection_id":"collection-123","offset":10,"limit":25};

  function resolveCollectionId() {
    const template = config.collection_id || config.collectionId || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (!resolved) {
      throw new Error('Webflow list_collection_items requires a Collection ID.');
    }
    return resolved;
  }

  function resolveNumber(value, fallback) {
    if (value === null || value === undefined) {
      return typeof fallback === 'number' ? fallback : 0;
    }
    if (typeof value === 'number') {
      return value;
    }
    const resolved = interpolate(String(value), ctx).trim();
    if (!resolved) {
      return typeof fallback === 'number' ? fallback : 0;
    }
    const parsed = Number(resolved);
    return isNaN(parsed) ? (typeof fallback === 'number' ? fallback : 0) : parsed;
  }

  const collectionId = resolveCollectionId();
  const offset = resolveNumber(config.offset, 0);
  const limit = resolveNumber(config.limit, 100);

  const params = ['offset=' + Math.max(offset, 0), 'limit=' + Math.min(Math.max(limit, 1), 100)];

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    Accept: 'application/json'
  };

  try {
    const response = rateLimitAware(() => fetchJson({
      url: 'https://api.webflow.com/collections/' + encodeURIComponent(collectionId) + '/items?' + params.join('&'),
      method: 'GET',
      headers: headers
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    const items = response.body && Array.isArray(response.body.items)
      ? response.body.items
      : (Array.isArray(response.body) ? response.body : []);

    ctx.webflowCollectionId = collectionId;
    ctx.webflowCollectionItems = items;
    ctx.webflowCollectionCount = items.length;

    logInfo('webflow_list_collection_items_success', {
      status: response.status,
      collectionId: collectionId,
      count: items.length,
      offset: offset,
      limit: limit
    });

    return ctx;
  } catch (error) {
    logError('webflow_list_collection_items_failed', {
      collectionId: collectionId,
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:get_collection_item 1`] = `
function step_action_webflow_get_collection_item(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });
  const config = {"collection_id":"collection-123","item_id":"item-456"};

  function resolveId(value, label) {
    const template = value || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (!resolved) {
      throw new Error('Webflow get_collection_item requires a ' + label + '.');
    }
    return resolved;
  }

  const collectionId = resolveId(config.collection_id || config.collectionId, 'Collection ID');
  const itemId = resolveId(config.item_id || config.itemId, 'Item ID');

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    Accept: 'application/json'
  };

  try {
    const response = rateLimitAware(() => fetchJson({
      url:
        'https://api.webflow.com/collections/' +
        encodeURIComponent(collectionId) +
        '/items/' +
        encodeURIComponent(itemId),
      method: 'GET',
      headers: headers
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    ctx.webflowCollectionId = collectionId;
    ctx.webflowItemId = itemId;
    ctx.webflowItem = response.body || {};

    logInfo('webflow_get_collection_item_success', {
      status: response.status,
      collectionId: collectionId,
      itemId: itemId
    });

    return ctx;
  } catch (error) {
    logError('webflow_get_collection_item_failed', {
      collectionId: collectionId,
      itemId: itemId,
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:create_collection_item 1`] = `
function step_action_webflow_create_collection_item(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });
  const config = {"collection_id":"collection-123","fields":{"name":"{{lead.name}}","slug":"new-item"},"live":true};

  function resolveId(value, label) {
    const template = value || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (!resolved) {
      throw new Error('Webflow create_collection_item requires ' + label + '.');
    }
    return resolved;
  }

  function resolveBoolean(value, fallback) {
    if (value === null || value === undefined) {
      return !!fallback;
    }
    if (typeof value === 'boolean') {
      return value;
    }
    const normalized = interpolate(String(value), ctx).trim().toLowerCase();
    if (!normalized) {
      return !!fallback;
    }
    return normalized === 'true' || normalized === '1' || normalized === 'yes';
  }

  function resolveStructured(value) {
    if (value === null || value === undefined) {
      return undefined;
    }
    if (Array.isArray(value)) {
      const result = [];
      for (let i = 0; i < value.length; i++) {
        result.push(resolveStructured(value[i]));
      }
      return result;
    }
    if (typeof value === 'object') {
      const result = {};
      for (const key in value) {
        if (Object.prototype.hasOwnProperty.call(value, key)) {
          result[key] = resolveStructured(value[key]);
        }
      }
      return result;
    }
    if (typeof value === 'string') {
      return interpolate(value, ctx);
    }
    return value;
  }

  const collectionId = resolveId(config.collection_id || config.collectionId, 'a Collection ID');
  const fields = resolveStructured(config.fields) || {};
  const live = resolveBoolean(config.live, false);

  if (!fields || typeof fields !== 'object' || Object.keys(fields).length === 0) {
    throw new Error('Webflow create_collection_item requires at least one field value.');
  }

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    'Content-Type': 'application/json',
    Accept: 'application/json'
  };

  try {
    const response = rateLimitAware(() => fetchJson({
      url:
        'https://api.webflow.com/collections/' +
        encodeURIComponent(collectionId) +
        '/items?live=' + (live ? 'true' : 'false'),
      method: 'POST',
      headers: headers,
      payload: JSON.stringify({ fields: fields }),
      contentType: 'application/json'
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    const body = response.body || {};
    const itemId =
      (body && (body._id || body.id)) ||
      (body.item && (body.item._id || body.item.id)) ||
      null;

    ctx.webflowCollectionId = collectionId;
    ctx.webflowItemId = itemId;
    ctx.webflowItem = body;
    ctx.webflowItemPublished = live;

    logInfo('webflow_create_collection_item_success', {
      status: response.status,
      collectionId: collectionId,
      itemId: itemId,
      live: live
    });

    return ctx;
  } catch (error) {
    logError('webflow_create_collection_item_failed', {
      collectionId: collectionId,
      live: live,
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:update_collection_item 1`] = `
function step_action_webflow_update_collection_item(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });
  const config = {"collection_id":"collection-123","item_id":"item-456","fields":{"name":"Updated Title"},"live":false};

  function resolveId(value, label) {
    const template = value || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (!resolved) {
      throw new Error('Webflow update_collection_item requires ' + label + '.');
    }
    return resolved;
  }

  function resolveBoolean(value, fallback) {
    if (value === null || value === undefined) {
      return !!fallback;
    }
    if (typeof value === 'boolean') {
      return value;
    }
    const normalized = interpolate(String(value), ctx).trim().toLowerCase();
    if (!normalized) {
      return !!fallback;
    }
    return normalized === 'true' || normalized === '1' || normalized === 'yes';
  }

  function resolveStructured(value) {
    if (value === null || value === undefined) {
      return undefined;
    }
    if (Array.isArray(value)) {
      const result = [];
      for (let i = 0; i < value.length; i++) {
        result.push(resolveStructured(value[i]));
      }
      return result;
    }
    if (typeof value === 'object') {
      const result = {};
      for (const key in value) {
        if (Object.prototype.hasOwnProperty.call(value, key)) {
          result[key] = resolveStructured(value[key]);
        }
      }
      return result;
    }
    if (typeof value === 'string') {
      return interpolate(value, ctx);
    }
    return value;
  }

  const collectionId = resolveId(config.collection_id || config.collectionId, 'a Collection ID');
  const itemId = resolveId(config.item_id || config.itemId, 'an Item ID');
  const fields = resolveStructured(config.fields) || {};
  const live = resolveBoolean(config.live, false);

  if (!fields || typeof fields !== 'object' || Object.keys(fields).length === 0) {
    throw new Error('Webflow update_collection_item requires at least one field value.');
  }

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    'Content-Type': 'application/json',
    Accept: 'application/json'
  };

  try {
    const response = rateLimitAware(() => fetchJson({
      url:
        'https://api.webflow.com/collections/' +
        encodeURIComponent(collectionId) +
        '/items/' +
        encodeURIComponent(itemId) +
        '?live=' + (live ? 'true' : 'false'),
      method: 'PUT',
      headers: headers,
      payload: JSON.stringify({ fields: fields }),
      contentType: 'application/json'
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    const body = response.body || {};

    ctx.webflowCollectionId = collectionId;
    ctx.webflowItemId = itemId;
    ctx.webflowItem = body;
    ctx.webflowItemPublished = live;

    logInfo('webflow_update_collection_item_success', {
      status: response.status,
      collectionId: collectionId,
      itemId: itemId,
      live: live
    });

    return ctx;
  } catch (error) {
    logError('webflow_update_collection_item_failed', {
      collectionId: collectionId,
      itemId: itemId,
      live: live,
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:delete_collection_item 1`] = `
function step_action_webflow_delete_collection_item(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });
  const config = {"collection_id":"collection-123","item_id":"item-456","live":true};

  function resolveId(value, label) {
    const template = value || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (!resolved) {
      throw new Error('Webflow delete_collection_item requires ' + label + '.');
    }
    return resolved;
  }

  function resolveBoolean(value, fallback) {
    if (value === null || value === undefined) {
      return !!fallback;
    }
    if (typeof value === 'boolean') {
      return value;
    }
    const normalized = interpolate(String(value), ctx).trim().toLowerCase();
    if (!normalized) {
      return !!fallback;
    }
    return normalized === 'true' || normalized === '1' || normalized === 'yes';
  }

  const collectionId = resolveId(config.collection_id || config.collectionId, 'a Collection ID');
  const itemId = resolveId(config.item_id || config.itemId, 'an Item ID');
  const live = resolveBoolean(config.live, false);

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    Accept: 'application/json'
  };

  try {
    const response = rateLimitAware(() => fetchJson({
      url:
        'https://api.webflow.com/collections/' +
        encodeURIComponent(collectionId) +
        '/items/' +
        encodeURIComponent(itemId) +
        '?live=' + (live ? 'true' : 'false'),
      method: 'DELETE',
      headers: headers
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    ctx.webflowCollectionId = collectionId;
    ctx.webflowItemId = itemId;
    ctx.webflowItemDeleted = true;
    ctx.webflowItemPublished = live;

    logInfo('webflow_delete_collection_item_success', {
      status: response.status,
      collectionId: collectionId,
      itemId: itemId,
      live: live
    });

    return ctx;
  } catch (error) {
    logError('webflow_delete_collection_item_failed', {
      collectionId: collectionId,
      itemId: itemId,
      live: live,
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:publish_site 1`] = `
function step_action_webflow_publish_site(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });
  const config = {"site_id":"site-123","domains":["example.com","{{site.subdomain}}.webflow.io"]};

  function optionalSecret(name) {
    try {
      return getSecret(name, { connectorKey: 'webflow' });
    } catch (error) {
      return '';
    }
  }

  function resolveSiteId() {
    const template = config.site_id || config.siteId || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (resolved) {
      return resolved;
    }
    const fallback = optionalSecret('WEBFLOW_DEFAULT_SITE_ID');
    if (fallback) {
      return fallback;
    }
    throw new Error('Webflow publish_site requires a Site ID. Configure one or set WEBFLOW_DEFAULT_SITE_ID.');
  }

  function resolveDomains() {
    const domainsConfig = config.domains || [];
    const result = [];
    if (Array.isArray(domainsConfig)) {
      for (let i = 0; i < domainsConfig.length; i++) {
        const entry = domainsConfig[i];
        if (entry === null || entry === undefined) {
          continue;
        }
        const resolved = typeof entry === 'string' ? interpolate(entry, ctx).trim() : String(entry).trim();
        if (resolved) {
          result.push(resolved);
        }
      }
    }
    return result;
  }

  const siteId = resolveSiteId();
  const domains = resolveDomains();

  if (!domains.length) {
    logWarn('webflow_publish_site_no_domains', {
      siteId: siteId,
      message: 'Publishing without explicit domains uses Webflow defaults.'
    });
  }

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    'Content-Type': 'application/json',
    Accept: 'application/json'
  };

  const payload = domains.length ? { domains: domains } : {};

  try {
    const response = rateLimitAware(() => fetchJson({
      url: 'https://api.webflow.com/sites/' + encodeURIComponent(siteId) + '/publish',
      method: 'POST',
      headers: headers,
      payload: JSON.stringify(payload),
      contentType: 'application/json'
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    ctx.webflowSiteId = siteId;
    ctx.webflowPublishResponse = response.body || {};

    logInfo('webflow_publish_site_success', {
      status: response.status,
      siteId: siteId,
      domainCount: domains.length
    });

    return ctx;
  } catch (error) {
    logError('webflow_publish_site_failed', {
      siteId: siteId,
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:list_webhooks 1`] = `
function step_action_webflow_list_webhooks(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });
  const config = {"site_id":"site-123"};

  function optionalSecret(name) {
    try {
      return getSecret(name, { connectorKey: 'webflow' });
    } catch (error) {
      return '';
    }
  }

  function resolveSiteId() {
    const template = config.site_id || config.siteId || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (resolved) {
      return resolved;
    }
    const fallback = optionalSecret('WEBFLOW_DEFAULT_SITE_ID');
    if (fallback) {
      return fallback;
    }
    throw new Error('Webflow list_webhooks requires a Site ID. Configure one or set WEBFLOW_DEFAULT_SITE_ID.');
  }

  const siteId = resolveSiteId();

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    Accept: 'application/json'
  };

  try {
    const response = rateLimitAware(() => fetchJson({
      url: 'https://api.webflow.com/sites/' + encodeURIComponent(siteId) + '/webhooks',
      method: 'GET',
      headers: headers
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    const webhooks = Array.isArray(response.body)
      ? response.body
      : (response.body && Array.isArray(response.body.webhooks) ? response.body.webhooks : []);

    ctx.webflowSiteId = siteId;
    ctx.webflowWebhooks = webhooks;

    logInfo('webflow_list_webhooks_success', {
      status: response.status,
      siteId: siteId,
      webhookCount: webhooks.length
    });

    return ctx;
  } catch (error) {
    logError('webflow_list_webhooks_failed', {
      siteId: siteId,
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:create_webhook 1`] = `
function step_action_webflow_create_webhook(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });
  const config = {"site_id":"site-123","triggerType":"form_submission","url":"https://hooks.example.com/webflow","filter":{"formId":"{{form.id}}"}};

  function optionalSecret(name) {
    try {
      return getSecret(name, { connectorKey: 'webflow' });
    } catch (error) {
      return '';
    }
  }

  function resolveSiteId() {
    const template = config.site_id || config.siteId || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (resolved) {
      return resolved;
    }
    const fallback = optionalSecret('WEBFLOW_DEFAULT_SITE_ID');
    if (fallback) {
      return fallback;
    }
    throw new Error('Webflow create_webhook requires a Site ID. Configure one or set WEBFLOW_DEFAULT_SITE_ID.');
  }

  function resolveString(value, label) {
    if (value === null || value === undefined) {
      throw new Error('Webflow create_webhook requires ' + label + '.');
    }
    const resolved = typeof value === 'string' ? interpolate(value, ctx).trim() : String(value).trim();
    if (!resolved) {
      throw new Error('Webflow create_webhook requires ' + label + '.');
    }
    return resolved;
  }

  function resolveFilter(value) {
    if (value === null || value === undefined) {
      return undefined;
    }
    if (Array.isArray(value)) {
      const result = [];
      for (let i = 0; i < value.length; i++) {
        result.push(resolveFilter(value[i]));
      }
      return result;
    }
    if (typeof value === 'object') {
      const result = {};
      for (const key in value) {
        if (Object.prototype.hasOwnProperty.call(value, key)) {
          result[key] = resolveFilter(value[key]);
        }
      }
      return result;
    }
    if (typeof value === 'string') {
      return interpolate(value, ctx);
    }
    return value;
  }

  const siteId = resolveSiteId();
  const triggerType = resolveString(config.triggerType, 'a trigger type');
  const targetUrl = resolveString(config.url, 'a callback URL');
  const filter = resolveFilter(config.filter);

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    'Content-Type': 'application/json',
    Accept: 'application/json'
  };

  const payload = { triggerType: triggerType, url: targetUrl };
  if (filter && typeof filter === 'object' && Object.keys(filter).length > 0) {
    payload.filter = filter;
  }

  try {
    const response = rateLimitAware(() => fetchJson({
      url: 'https://api.webflow.com/sites/' + encodeURIComponent(siteId) + '/webhooks',
      method: 'POST',
      headers: headers,
      payload: JSON.stringify(payload),
      contentType: 'application/json'
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    const body = response.body || {};
    const webhookId = body && (body._id || body.id) ? (body._id || body.id) : null;

    ctx.webflowSiteId = siteId;
    ctx.webflowWebhookId = webhookId;
    ctx.webflowWebhook = body;

    logInfo('webflow_create_webhook_success', {
      status: response.status,
      siteId: siteId,
      triggerType: triggerType,
      webhookId: webhookId
    });

    return ctx;
  } catch (error) {
    logError('webflow_create_webhook_failed', {
      siteId: siteId,
      triggerType: triggerType,
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds action.webflow:delete_webhook 1`] = `
function step_action_webflow_delete_webhook(ctx) {
  ctx = ctx || {};

  const accessToken = getSecret('WEBFLOW_API_TOKEN', { connectorKey: 'webflow' });
  const config = {"site_id":"site-123","webhook_id":"wh_001"};

  function optionalSecret(name) {
    try {
      return getSecret(name, { connectorKey: 'webflow' });
    } catch (error) {
      return '';
    }
  }

  function resolveSiteId() {
    const template = config.site_id || config.siteId || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (resolved) {
      return resolved;
    }
    const fallback = optionalSecret('WEBFLOW_DEFAULT_SITE_ID');
    if (fallback) {
      return fallback;
    }
    throw new Error('Webflow delete_webhook requires a Site ID. Configure one or set WEBFLOW_DEFAULT_SITE_ID.');
  }

  function resolveWebhookId() {
    const template = config.webhook_id || config.webhookId || '';
    const resolved = template ? interpolate(String(template), ctx).trim() : '';
    if (!resolved) {
      throw new Error('Webflow delete_webhook requires a Webhook ID.');
    }
    return resolved;
  }

  const siteId = resolveSiteId();
  const webhookId = resolveWebhookId();

  const headers = {
    Authorization: 'Bearer ' + accessToken,
    'accept-version': '1.0.0',
    Accept: 'application/json'
  };

  try {
    const response = rateLimitAware(() => fetchJson({
      url:
        'https://api.webflow.com/sites/' +
        encodeURIComponent(siteId) +
        '/webhooks/' +
        encodeURIComponent(webhookId),
      method: 'DELETE',
      headers: headers
    }), { attempts: 4, initialDelayMs: 750, jitter: 0.25 });

    ctx.webflowSiteId = siteId;
    ctx.webflowWebhookId = webhookId;
    ctx.webflowWebhookDeleted = true;

    logInfo('webflow_delete_webhook_success', {
      status: response.status,
      siteId: siteId,
      webhookId: webhookId
    });

    return ctx;
  } catch (error) {
    logError('webflow_delete_webhook_failed', {
      siteId: siteId,
      webhookId: webhookId,
      status: error && error.status ? error.status : null,
      message: error && error.message ? error.message : String(error)
    });
    throw error;
  }
}
`;

exports[`Apps Script Webflow REAL_OPS builds trigger.webflow:form_submission 1`] = `
function trigger_trigger_webflow_form_submission(ctx) {
  ctx = ctx || {};

  const payload = ctx && ctx.webhookPayload ? ctx.webhookPayload : {};
  const event = payload && payload.event ? payload.event : ctx.event || {};

  ctx.webflowTrigger = 'form_submission';
  ctx.webflowFormSubmission = payload;
  ctx.webflowEvent = event;

  logInfo('webflow_form_submission_received', {
    trigger: 'form_submission',
    formName: payload && payload.formName ? payload.formName : null
  });

  return ctx;
}
`;

exports[`Apps Script Webflow REAL_OPS builds trigger.webflow:collection_item_created 1`] = `
function trigger_trigger_webflow_collection_item_created(ctx) {
  ctx = ctx || {};

  const payload = ctx && ctx.webhookPayload ? ctx.webhookPayload : {};
  const event = payload && payload.event ? payload.event : ctx.event || {};

  ctx.webflowTrigger = 'collection_item_created';
  ctx.webflowEvent = event;
  ctx.webflowCollectionItem = payload;

  logInfo('webflow_collection_item_created_received', {
    trigger: 'collection_item_created',
    collectionId: payload && payload.collectionId ? payload.collectionId : null,
    itemId: payload && payload._id ? payload._id : (payload && payload.id ? payload.id : null)
  });

  return ctx;
}
`;

exports[`Apps Script Webflow REAL_OPS builds trigger.webflow:collection_item_changed 1`] = `
function trigger_trigger_webflow_collection_item_changed(ctx) {
  ctx = ctx || {};

  const payload = ctx && ctx.webhookPayload ? ctx.webhookPayload : {};
  const event = payload && payload.event ? payload.event : ctx.event || {};

  ctx.webflowTrigger = 'collection_item_changed';
  ctx.webflowEvent = event;
  ctx.webflowCollectionItem = payload;

  logInfo('webflow_collection_item_changed_received', {
    trigger: 'collection_item_changed',
    collectionId: payload && payload.collectionId ? payload.collectionId : null,
    itemId: payload && payload._id ? payload._id : (payload && payload.id ? payload.id : null)
  });

  return ctx;
}
`;

exports[`Apps Script Webflow REAL_OPS builds trigger.webflow:site_published 1`] = `
function trigger_trigger_webflow_site_published(ctx) {
  ctx = ctx || {};

  const payload = ctx && ctx.webhookPayload ? ctx.webhookPayload : {};
  const event = payload && payload.event ? payload.event : ctx.event || {};

  ctx.webflowTrigger = 'site_published';
  ctx.webflowEvent = event;
  ctx.webflowPublishDetails = payload;

  logInfo('webflow_site_published_received', {
    trigger: 'site_published',
    siteId: payload && payload.siteId ? payload.siteId : null
  });

  return ctx;
}
`;
